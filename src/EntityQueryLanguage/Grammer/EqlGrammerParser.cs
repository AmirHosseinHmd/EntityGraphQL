//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from src/EntityQueryLanguage/Grammer/EqlGrammer.g4 by ANTLR 4.6.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace EntityQueryLanguage.Grammer {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class EqlGrammerParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, ID=30, DIGIT=31, STRING_CHARS=32;
	public const int
		RULE_identity = 0, RULE_callPath = 1, RULE_int = 2, RULE_decimal = 3, 
		RULE_string = 4, RULE_constant = 5, RULE_call = 6, RULE_args = 7, RULE_operator = 8, 
		RULE_expression = 9, RULE_startRule = 10, RULE_ws = 11, RULE_field = 12, 
		RULE_aliasType = 13, RULE_aliasExp = 14, RULE_fieldSelect = 15, RULE_entityQuery = 16, 
		RULE_dataQuery = 17;
	public static readonly string[] ruleNames = {
		"identity", "callPath", "int", "decimal", "string", "constant", "call", 
		"args", "operator", "expression", "startRule", "ws", "field", "aliasType", 
		"aliasExp", "fieldSelect", "entityQuery", "dataQuery"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'-'", "'''", "'\n'", "'\r'", "'('", "')'", "','", "'+'", 
		"'%'", "'^'", "'and'", "'*'", "'or'", "'='", "'<='", "'>='", "'<'", "'>'", 
		"'/'", "'if'", "' '", "'then'", "'else'", "'?'", "':'", "'\t'", "'{'", 
		"'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "ID", "DIGIT", "STRING_CHARS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EqlGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public EqlGrammerParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class IdentityContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(EqlGrammerParser.ID, 0); }
		public IdentityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identity; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentityContext identity() {
		IdentityContext _localctx = new IdentityContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_identity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallPathContext : ParserRuleContext {
		public IdentityContext[] identity() {
			return GetRuleContexts<IdentityContext>();
		}
		public IdentityContext identity(int i) {
			return GetRuleContext<IdentityContext>(i);
		}
		public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public CallPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callPath; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallPathContext callPath() {
		CallPathContext _localctx = new CallPathContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_callPath);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 38; identity();
				}
				break;

			case 2:
				{
				State = 39; call();
				}
				break;
			}
			State = 49;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 42; Match(T__0);
					State = 45;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
					case 1:
						{
						State = 43; identity();
						}
						break;

					case 2:
						{
						State = 44; call();
						}
						break;
					}
					}
					} 
				}
				State = 51;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(EqlGrammerParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(EqlGrammerParser.DIGIT, i);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_int);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 52; Match(T__1);
				}
			}

			State = 56;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 55; Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 58;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(EqlGrammerParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(EqlGrammerParser.DIGIT, i);
		}
		public DecimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalContext @decimal() {
		DecimalContext _localctx = new DecimalContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_decimal);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 60; Match(T__1);
				}
			}

			State = 64;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 63; Match(DIGIT);
				}
				}
				State = 66;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==DIGIT );
			State = 68; Match(T__0);
			State = 70;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 69; Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 72;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode[] STRING_CHARS() { return GetTokens(EqlGrammerParser.STRING_CHARS); }
		public ITerminalNode STRING_CHARS(int i) {
			return GetToken(EqlGrammerParser.STRING_CHARS, i);
		}
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_string);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(T__2);
			State = 80;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					State = 78;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
					case 1:
						{
						State = 75; Match(T__2);
						}
						break;

					case 2:
						{
						State = 76;
						_la = _input.La(1);
						if ( _la <= 0 || (_la==T__3 || _la==T__4) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 3:
						{
						State = 77; Match(STRING_CHARS);
						}
						break;
					}
					} 
				}
				State = 82;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			State = 83; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecimalContext @decimal() {
			return GetRuleContext<DecimalContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_constant);
		try {
			State = 88;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 85; @string();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 86; @int();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 87; @decimal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public IdentityContext method;
		public ArgsContext arguments;
		public IdentityContext identity() {
			return GetRuleContext<IdentityContext>(0);
		}
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; _localctx.method = identity();
			State = 91; Match(T__5);
			State = 93;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__5) | (1L << T__20) | (1L << ID) | (1L << DIGIT))) != 0)) {
				{
				State = 92; _localctx.arguments = args();
				}
			}

			State = 95; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; expression(0);
			State = 102;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__7) {
				{
				{
				State = 98; Match(T__7);
				State = 99; expression(0);
				}
				}
				State = 104;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfThenElseContext : ExpressionContext {
		public ExpressionContext test;
		public ExpressionContext ifTrue;
		public ExpressionContext ifFalse;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfThenElseContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryContext : ExpressionContext {
		public ExpressionContext left;
		public OperatorContext op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public BinaryContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfThenElseInlineContext : ExpressionContext {
		public ExpressionContext test;
		public ExpressionContext ifTrue;
		public ExpressionContext ifFalse;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfThenElseInlineContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElseInline(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprContext : ExpressionContext {
		public ExpressionContext body;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallOrIdContext : ExpressionContext {
		public CallPathContext callPath() {
			return GetRuleContext<CallPathContext>(0);
		}
		public CallOrIdContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallOrId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__20:
				{
				_localctx = new IfThenElseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 108; Match(T__20);
				State = 112;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__21) {
					{
					{
					State = 109; Match(T__21);
					}
					}
					State = 114;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 115; ((IfThenElseContext)_localctx).test = expression(0);
				State = 119;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__21) {
					{
					{
					State = 116; Match(T__21);
					}
					}
					State = 121;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 122; Match(T__22);
				State = 126;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__21) {
					{
					{
					State = 123; Match(T__21);
					}
					}
					State = 128;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 129; ((IfThenElseContext)_localctx).ifTrue = expression(0);
				State = 133;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__21) {
					{
					{
					State = 130; Match(T__21);
					}
					}
					State = 135;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 136; Match(T__23);
				State = 140;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__21) {
					{
					{
					State = 137; Match(T__21);
					}
					}
					State = 142;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 143; ((IfThenElseContext)_localctx).ifFalse = expression(6);
				}
				break;
			case T__5:
				{
				_localctx = new ExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 145; Match(T__5);
				State = 146; ((ExprContext)_localctx).body = expression(0);
				State = 147; Match(T__6);
				}
				break;
			case ID:
				{
				_localctx = new CallOrIdContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 149; callPath();
				}
				break;
			case T__1:
			case T__2:
			case DIGIT:
				{
				_localctx = new ConstContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 150; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 201;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 199;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
					case 1:
						{
						_localctx = new IfThenElseInlineContext(new ExpressionContext(_parentctx, _parentState));
						((IfThenElseInlineContext)_localctx).test = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 153;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 157;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 154; Match(T__21);
							}
							}
							State = 159;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 160; Match(T__24);
						State = 164;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 161; Match(T__21);
							}
							}
							State = 166;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 167; ((IfThenElseInlineContext)_localctx).ifTrue = expression(0);
						State = 171;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 168; Match(T__21);
							}
							}
							State = 173;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 174; Match(T__25);
						State = 178;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 175; Match(T__21);
							}
							}
							State = 180;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 181; ((IfThenElseInlineContext)_localctx).ifFalse = expression(6);
						}
						break;

					case 2:
						{
						_localctx = new BinaryContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 183;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 187;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 184; Match(T__21);
							}
							}
							State = 189;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 190; ((BinaryContext)_localctx).op = @operator();
						State = 194;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 191; Match(T__21);
							}
							}
							State = 196;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 197; ((BinaryContext)_localctx).right = expression(5);
						}
						break;
					}
					} 
				}
				State = 203;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StartRuleContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WsContext : ParserRuleContext {
		public WsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ws; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WsContext ws() {
		WsContext _localctx = new WsContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_ws);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public CallPathContext callPath() {
			return GetRuleContext<CallPathContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; callPath();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasTypeContext : ParserRuleContext {
		public IdentityContext name;
		public IdentityContext identity() {
			return GetRuleContext<IdentityContext>(0);
		}
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public AliasTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasTypeContext aliasType() {
		AliasTypeContext _localctx = new AliasTypeContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_aliasType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; _localctx.name = identity();
			State = 214;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 211; ws();
				}
				}
				State = 216;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 217; Match(T__25);
			State = 221;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 218; ws();
				}
				}
				State = 223;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasExpContext : ParserRuleContext {
		public AliasTypeContext alias;
		public ExpressionContext entity;
		public AliasTypeContext aliasType() {
			return GetRuleContext<AliasTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AliasExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasExp; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasExpContext aliasExp() {
		AliasExpContext _localctx = new AliasExpContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_aliasExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; _localctx.alias = aliasType();
			State = 225; _localctx.entity = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldSelectContext : ParserRuleContext {
		public AliasExpContext[] aliasExp() {
			return GetRuleContexts<AliasExpContext>();
		}
		public AliasExpContext aliasExp(int i) {
			return GetRuleContext<AliasExpContext>(i);
		}
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public EntityQueryContext[] entityQuery() {
			return GetRuleContexts<EntityQueryContext>();
		}
		public EntityQueryContext entityQuery(int i) {
			return GetRuleContext<EntityQueryContext>(i);
		}
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public FieldSelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldSelect; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldSelectContext fieldSelect() {
		FieldSelectContext _localctx = new FieldSelectContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_fieldSelect);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 227; Match(T__27);
			State = 231;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 228; ws();
				}
				}
				State = 233;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 237;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 234; aliasExp();
				}
				break;

			case 2:
				{
				State = 235; field();
				}
				break;

			case 3:
				{
				State = 236; entityQuery();
				}
				break;
			}
			State = 259;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 242;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
						{
						{
						State = 239; ws();
						}
						}
						State = 244;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 245; Match(T__7);
					State = 249;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
						{
						{
						State = 246; ws();
						}
						}
						State = 251;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 255;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
					case 1:
						{
						State = 252; aliasExp();
						}
						break;

					case 2:
						{
						State = 253; field();
						}
						break;

					case 3:
						{
						State = 254; entityQuery();
						}
						break;
					}
					}
					} 
				}
				State = 261;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			State = 265;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 262; ws();
				}
				}
				State = 267;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 268; Match(T__28);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityQueryContext : ParserRuleContext {
		public AliasTypeContext alias;
		public CallPathContext entity;
		public FieldSelectContext fields;
		public CallPathContext callPath() {
			return GetRuleContext<CallPathContext>(0);
		}
		public FieldSelectContext fieldSelect() {
			return GetRuleContext<FieldSelectContext>(0);
		}
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public AliasTypeContext aliasType() {
			return GetRuleContext<AliasTypeContext>(0);
		}
		public EntityQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityQueryContext entityQuery() {
		EntityQueryContext _localctx = new EntityQueryContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_entityQuery);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 270; _localctx.alias = aliasType();
				}
				break;
			}
			State = 273; _localctx.entity = callPath();
			State = 277;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 274; ws();
				}
				}
				State = 279;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 280; _localctx.fields = fieldSelect();
			State = 284;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 281; ws();
					}
					} 
				}
				State = 286;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataQueryContext : ParserRuleContext {
		public AliasExpContext[] aliasExp() {
			return GetRuleContexts<AliasExpContext>();
		}
		public AliasExpContext aliasExp(int i) {
			return GetRuleContext<AliasExpContext>(i);
		}
		public EntityQueryContext[] entityQuery() {
			return GetRuleContexts<EntityQueryContext>();
		}
		public EntityQueryContext entityQuery(int i) {
			return GetRuleContext<EntityQueryContext>(i);
		}
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public DataQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataQueryContext dataQuery() {
		DataQueryContext _localctx = new DataQueryContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_dataQuery);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 287; ws();
				}
				}
				State = 292;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 293; Match(T__27);
			State = 297;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 294; ws();
				}
				}
				State = 299;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 302;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				State = 300; aliasExp();
				}
				break;

			case 2:
				{
				State = 301; entityQuery();
				}
				break;
			}
			State = 323;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,45,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 307;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
						{
						{
						State = 304; ws();
						}
						}
						State = 309;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 310; Match(T__7);
					State = 314;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
						{
						{
						State = 311; ws();
						}
						}
						State = 316;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 319;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
					case 1:
						{
						State = 317; aliasExp();
						}
						break;

					case 2:
						{
						State = 318; entityQuery();
						}
						break;
					}
					}
					} 
				}
				State = 325;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,45,_ctx);
			}
			State = 329;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 326; ws();
				}
				}
				State = 331;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 332; Match(T__28);
			State = 336;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 333; ws();
				}
				}
				State = 338;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\"\x156\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x3\x2\x3\x2\x3\x3\x3\x3"+
		"\x5\x3+\n\x3\x3\x3\x3\x3\x3\x3\x5\x3\x30\n\x3\a\x3\x32\n\x3\f\x3\xE\x3"+
		"\x35\v\x3\x3\x4\x5\x4\x38\n\x4\x3\x4\x6\x4;\n\x4\r\x4\xE\x4<\x3\x5\x5"+
		"\x5@\n\x5\x3\x5\x6\x5\x43\n\x5\r\x5\xE\x5\x44\x3\x5\x3\x5\x6\x5I\n\x5"+
		"\r\x5\xE\x5J\x3\x6\x3\x6\x3\x6\x3\x6\a\x6Q\n\x6\f\x6\xE\x6T\v\x6\x3\x6"+
		"\x3\x6\x3\a\x3\a\x3\a\x5\a[\n\a\x3\b\x3\b\x3\b\x5\b`\n\b\x3\b\x3\b\x3"+
		"\t\x3\t\x3\t\a\tg\n\t\f\t\xE\tj\v\t\x3\n\x3\n\x3\v\x3\v\x3\v\a\vq\n\v"+
		"\f\v\xE\vt\v\v\x3\v\x3\v\a\vx\n\v\f\v\xE\v{\v\v\x3\v\x3\v\a\v\x7F\n\v"+
		"\f\v\xE\v\x82\v\v\x3\v\x3\v\a\v\x86\n\v\f\v\xE\v\x89\v\v\x3\v\x3\v\a\v"+
		"\x8D\n\v\f\v\xE\v\x90\v\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v"+
		"\x9A\n\v\x3\v\x3\v\a\v\x9E\n\v\f\v\xE\v\xA1\v\v\x3\v\x3\v\a\v\xA5\n\v"+
		"\f\v\xE\v\xA8\v\v\x3\v\x3\v\a\v\xAC\n\v\f\v\xE\v\xAF\v\v\x3\v\x3\v\a\v"+
		"\xB3\n\v\f\v\xE\v\xB6\v\v\x3\v\x3\v\x3\v\x3\v\a\v\xBC\n\v\f\v\xE\v\xBF"+
		"\v\v\x3\v\x3\v\a\v\xC3\n\v\f\v\xE\v\xC6\v\v\x3\v\x3\v\a\v\xCA\n\v\f\v"+
		"\xE\v\xCD\v\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\a\xF\xD7\n\xF"+
		"\f\xF\xE\xF\xDA\v\xF\x3\xF\x3\xF\a\xF\xDE\n\xF\f\xF\xE\xF\xE1\v\xF\x3"+
		"\x10\x3\x10\x3\x10\x3\x11\x3\x11\a\x11\xE8\n\x11\f\x11\xE\x11\xEB\v\x11"+
		"\x3\x11\x3\x11\x3\x11\x5\x11\xF0\n\x11\x3\x11\a\x11\xF3\n\x11\f\x11\xE"+
		"\x11\xF6\v\x11\x3\x11\x3\x11\a\x11\xFA\n\x11\f\x11\xE\x11\xFD\v\x11\x3"+
		"\x11\x3\x11\x3\x11\x5\x11\x102\n\x11\a\x11\x104\n\x11\f\x11\xE\x11\x107"+
		"\v\x11\x3\x11\a\x11\x10A\n\x11\f\x11\xE\x11\x10D\v\x11\x3\x11\x3\x11\x3"+
		"\x12\x5\x12\x112\n\x12\x3\x12\x3\x12\a\x12\x116\n\x12\f\x12\xE\x12\x119"+
		"\v\x12\x3\x12\x3\x12\a\x12\x11D\n\x12\f\x12\xE\x12\x120\v\x12\x3\x13\a"+
		"\x13\x123\n\x13\f\x13\xE\x13\x126\v\x13\x3\x13\x3\x13\a\x13\x12A\n\x13"+
		"\f\x13\xE\x13\x12D\v\x13\x3\x13\x3\x13\x5\x13\x131\n\x13\x3\x13\a\x13"+
		"\x134\n\x13\f\x13\xE\x13\x137\v\x13\x3\x13\x3\x13\a\x13\x13B\n\x13\f\x13"+
		"\xE\x13\x13E\v\x13\x3\x13\x3\x13\x5\x13\x142\n\x13\a\x13\x144\n\x13\f"+
		"\x13\xE\x13\x147\v\x13\x3\x13\a\x13\x14A\n\x13\f\x13\xE\x13\x14D\v\x13"+
		"\x3\x13\x3\x13\a\x13\x151\n\x13\f\x13\xE\x13\x154\v\x13\x3\x13\x3R\x2"+
		"\x3\x14\x14\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2"+
		"\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2\x2\x5\x3\x2\x6\a\x4\x2"+
		"\x4\x4\v\x16\x5\x2\x6\a\x18\x18\x1D\x1D\x179\x2&\x3\x2\x2\x2\x4*\x3\x2"+
		"\x2\x2\x6\x37\x3\x2\x2\x2\b?\x3\x2\x2\x2\nL\x3\x2\x2\x2\fZ\x3\x2\x2\x2"+
		"\xE\\\x3\x2\x2\x2\x10\x63\x3\x2\x2\x2\x12k\x3\x2\x2\x2\x14\x99\x3\x2\x2"+
		"\x2\x16\xCE\x3\x2\x2\x2\x18\xD0\x3\x2\x2\x2\x1A\xD2\x3\x2\x2\x2\x1C\xD4"+
		"\x3\x2\x2\x2\x1E\xE2\x3\x2\x2\x2 \xE5\x3\x2\x2\x2\"\x111\x3\x2\x2\x2$"+
		"\x124\x3\x2\x2\x2&\'\a \x2\x2\'\x3\x3\x2\x2\x2(+\x5\x2\x2\x2)+\x5\xE\b"+
		"\x2*(\x3\x2\x2\x2*)\x3\x2\x2\x2+\x33\x3\x2\x2\x2,/\a\x3\x2\x2-\x30\x5"+
		"\x2\x2\x2.\x30\x5\xE\b\x2/-\x3\x2\x2\x2/.\x3\x2\x2\x2\x30\x32\x3\x2\x2"+
		"\x2\x31,\x3\x2\x2\x2\x32\x35\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x33\x34\x3"+
		"\x2\x2\x2\x34\x5\x3\x2\x2\x2\x35\x33\x3\x2\x2\x2\x36\x38\a\x4\x2\x2\x37"+
		"\x36\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38:\x3\x2\x2\x2\x39;\a!\x2\x2:\x39"+
		"\x3\x2\x2\x2;<\x3\x2\x2\x2<:\x3\x2\x2\x2<=\x3\x2\x2\x2=\a\x3\x2\x2\x2"+
		">@\a\x4\x2\x2?>\x3\x2\x2\x2?@\x3\x2\x2\x2@\x42\x3\x2\x2\x2\x41\x43\a!"+
		"\x2\x2\x42\x41\x3\x2\x2\x2\x43\x44\x3\x2\x2\x2\x44\x42\x3\x2\x2\x2\x44"+
		"\x45\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46H\a\x3\x2\x2GI\a!\x2\x2HG\x3\x2"+
		"\x2\x2IJ\x3\x2\x2\x2JH\x3\x2\x2\x2JK\x3\x2\x2\x2K\t\x3\x2\x2\x2LR\a\x5"+
		"\x2\x2MQ\a\x5\x2\x2NQ\n\x2\x2\x2OQ\a\"\x2\x2PM\x3\x2\x2\x2PN\x3\x2\x2"+
		"\x2PO\x3\x2\x2\x2QT\x3\x2\x2\x2RS\x3\x2\x2\x2RP\x3\x2\x2\x2SU\x3\x2\x2"+
		"\x2TR\x3\x2\x2\x2UV\a\x5\x2\x2V\v\x3\x2\x2\x2W[\x5\n\x6\x2X[\x5\x6\x4"+
		"\x2Y[\x5\b\x5\x2ZW\x3\x2\x2\x2ZX\x3\x2\x2\x2ZY\x3\x2\x2\x2[\r\x3\x2\x2"+
		"\x2\\]\x5\x2\x2\x2]_\a\b\x2\x2^`\x5\x10\t\x2_^\x3\x2\x2\x2_`\x3\x2\x2"+
		"\x2`\x61\x3\x2\x2\x2\x61\x62\a\t\x2\x2\x62\xF\x3\x2\x2\x2\x63h\x5\x14"+
		"\v\x2\x64\x65\a\n\x2\x2\x65g\x5\x14\v\x2\x66\x64\x3\x2\x2\x2gj\x3\x2\x2"+
		"\x2h\x66\x3\x2\x2\x2hi\x3\x2\x2\x2i\x11\x3\x2\x2\x2jh\x3\x2\x2\x2kl\t"+
		"\x3\x2\x2l\x13\x3\x2\x2\x2mn\b\v\x1\x2nr\a\x17\x2\x2oq\a\x18\x2\x2po\x3"+
		"\x2\x2\x2qt\x3\x2\x2\x2rp\x3\x2\x2\x2rs\x3\x2\x2\x2su\x3\x2\x2\x2tr\x3"+
		"\x2\x2\x2uy\x5\x14\v\x2vx\a\x18\x2\x2wv\x3\x2\x2\x2x{\x3\x2\x2\x2yw\x3"+
		"\x2\x2\x2yz\x3\x2\x2\x2z|\x3\x2\x2\x2{y\x3\x2\x2\x2|\x80\a\x19\x2\x2}"+
		"\x7F\a\x18\x2\x2~}\x3\x2\x2\x2\x7F\x82\x3\x2\x2\x2\x80~\x3\x2\x2\x2\x80"+
		"\x81\x3\x2\x2\x2\x81\x83\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x83\x87\x5\x14"+
		"\v\x2\x84\x86\a\x18\x2\x2\x85\x84\x3\x2\x2\x2\x86\x89\x3\x2\x2\x2\x87"+
		"\x85\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x8A\x3\x2\x2\x2\x89\x87\x3\x2"+
		"\x2\x2\x8A\x8E\a\x1A\x2\x2\x8B\x8D\a\x18\x2\x2\x8C\x8B\x3\x2\x2\x2\x8D"+
		"\x90\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\x8E\x8F\x3\x2\x2\x2\x8F\x91\x3\x2"+
		"\x2\x2\x90\x8E\x3\x2\x2\x2\x91\x92\x5\x14\v\b\x92\x9A\x3\x2\x2\x2\x93"+
		"\x94\a\b\x2\x2\x94\x95\x5\x14\v\x2\x95\x96\a\t\x2\x2\x96\x9A\x3\x2\x2"+
		"\x2\x97\x9A\x5\x4\x3\x2\x98\x9A\x5\f\a\x2\x99m\x3\x2\x2\x2\x99\x93\x3"+
		"\x2\x2\x2\x99\x97\x3\x2\x2\x2\x99\x98\x3\x2\x2\x2\x9A\xCB\x3\x2\x2\x2"+
		"\x9B\x9F\f\a\x2\x2\x9C\x9E\a\x18\x2\x2\x9D\x9C\x3\x2\x2\x2\x9E\xA1\x3"+
		"\x2\x2\x2\x9F\x9D\x3\x2\x2\x2\x9F\xA0\x3\x2\x2\x2\xA0\xA2\x3\x2\x2\x2"+
		"\xA1\x9F\x3\x2\x2\x2\xA2\xA6\a\x1B\x2\x2\xA3\xA5\a\x18\x2\x2\xA4\xA3\x3"+
		"\x2\x2\x2\xA5\xA8\x3\x2\x2\x2\xA6\xA4\x3\x2\x2\x2\xA6\xA7\x3\x2\x2\x2"+
		"\xA7\xA9\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA9\xAD\x5\x14\v\x2\xAA\xAC\a"+
		"\x18\x2\x2\xAB\xAA\x3\x2\x2\x2\xAC\xAF\x3\x2\x2\x2\xAD\xAB\x3\x2\x2\x2"+
		"\xAD\xAE\x3\x2\x2\x2\xAE\xB0\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\xB0\xB4\a"+
		"\x1C\x2\x2\xB1\xB3\a\x18\x2\x2\xB2\xB1\x3\x2\x2\x2\xB3\xB6\x3\x2\x2\x2"+
		"\xB4\xB2\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xB7\x3\x2\x2\x2\xB6\xB4\x3"+
		"\x2\x2\x2\xB7\xB8\x5\x14\v\b\xB8\xCA\x3\x2\x2\x2\xB9\xBD\f\x6\x2\x2\xBA"+
		"\xBC\a\x18\x2\x2\xBB\xBA\x3\x2\x2\x2\xBC\xBF\x3\x2\x2\x2\xBD\xBB\x3\x2"+
		"\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\xC0\x3\x2\x2\x2\xBF\xBD\x3\x2\x2\x2\xC0"+
		"\xC4\x5\x12\n\x2\xC1\xC3\a\x18\x2\x2\xC2\xC1\x3\x2\x2\x2\xC3\xC6\x3\x2"+
		"\x2\x2\xC4\xC2\x3\x2\x2\x2\xC4\xC5\x3\x2\x2\x2\xC5\xC7\x3\x2\x2\x2\xC6"+
		"\xC4\x3\x2\x2\x2\xC7\xC8\x5\x14\v\a\xC8\xCA\x3\x2\x2\x2\xC9\x9B\x3\x2"+
		"\x2\x2\xC9\xB9\x3\x2\x2\x2\xCA\xCD\x3\x2\x2\x2\xCB\xC9\x3\x2\x2\x2\xCB"+
		"\xCC\x3\x2\x2\x2\xCC\x15\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\xCE\xCF\x5\x14"+
		"\v\x2\xCF\x17\x3\x2\x2\x2\xD0\xD1\t\x4\x2\x2\xD1\x19\x3\x2\x2\x2\xD2\xD3"+
		"\x5\x4\x3\x2\xD3\x1B\x3\x2\x2\x2\xD4\xD8\x5\x2\x2\x2\xD5\xD7\x5\x18\r"+
		"\x2\xD6\xD5\x3\x2\x2\x2\xD7\xDA\x3\x2\x2\x2\xD8\xD6\x3\x2\x2\x2\xD8\xD9"+
		"\x3\x2\x2\x2\xD9\xDB\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDB\xDF\a\x1C\x2"+
		"\x2\xDC\xDE\x5\x18\r\x2\xDD\xDC\x3\x2\x2\x2\xDE\xE1\x3\x2\x2\x2\xDF\xDD"+
		"\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\x1D\x3\x2\x2\x2\xE1\xDF\x3\x2\x2"+
		"\x2\xE2\xE3\x5\x1C\xF\x2\xE3\xE4\x5\x14\v\x2\xE4\x1F\x3\x2\x2\x2\xE5\xE9"+
		"\a\x1E\x2\x2\xE6\xE8\x5\x18\r\x2\xE7\xE6\x3\x2\x2\x2\xE8\xEB\x3\x2\x2"+
		"\x2\xE9\xE7\x3\x2\x2\x2\xE9\xEA\x3\x2\x2\x2\xEA\xEF\x3\x2\x2\x2\xEB\xE9"+
		"\x3\x2\x2\x2\xEC\xF0\x5\x1E\x10\x2\xED\xF0\x5\x1A\xE\x2\xEE\xF0\x5\"\x12"+
		"\x2\xEF\xEC\x3\x2\x2\x2\xEF\xED\x3\x2\x2\x2\xEF\xEE\x3\x2\x2\x2\xF0\x105"+
		"\x3\x2\x2\x2\xF1\xF3\x5\x18\r\x2\xF2\xF1\x3\x2\x2\x2\xF3\xF6\x3\x2\x2"+
		"\x2\xF4\xF2\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF7\x3\x2\x2\x2\xF6\xF4"+
		"\x3\x2\x2\x2\xF7\xFB\a\n\x2\x2\xF8\xFA\x5\x18\r\x2\xF9\xF8\x3\x2\x2\x2"+
		"\xFA\xFD\x3\x2\x2\x2\xFB\xF9\x3\x2\x2\x2\xFB\xFC\x3\x2\x2\x2\xFC\x101"+
		"\x3\x2\x2\x2\xFD\xFB\x3\x2\x2\x2\xFE\x102\x5\x1E\x10\x2\xFF\x102\x5\x1A"+
		"\xE\x2\x100\x102\x5\"\x12\x2\x101\xFE\x3\x2\x2\x2\x101\xFF\x3\x2\x2\x2"+
		"\x101\x100\x3\x2\x2\x2\x102\x104\x3\x2\x2\x2\x103\xF4\x3\x2\x2\x2\x104"+
		"\x107\x3\x2\x2\x2\x105\x103\x3\x2\x2\x2\x105\x106\x3\x2\x2\x2\x106\x10B"+
		"\x3\x2\x2\x2\x107\x105\x3\x2\x2\x2\x108\x10A\x5\x18\r\x2\x109\x108\x3"+
		"\x2\x2\x2\x10A\x10D\x3\x2\x2\x2\x10B\x109\x3\x2\x2\x2\x10B\x10C\x3\x2"+
		"\x2\x2\x10C\x10E\x3\x2\x2\x2\x10D\x10B\x3\x2\x2\x2\x10E\x10F\a\x1F\x2"+
		"\x2\x10F!\x3\x2\x2\x2\x110\x112\x5\x1C\xF\x2\x111\x110\x3\x2\x2\x2\x111"+
		"\x112\x3\x2\x2\x2\x112\x113\x3\x2\x2\x2\x113\x117\x5\x4\x3\x2\x114\x116"+
		"\x5\x18\r\x2\x115\x114\x3\x2\x2\x2\x116\x119\x3\x2\x2\x2\x117\x115\x3"+
		"\x2\x2\x2\x117\x118\x3\x2\x2\x2\x118\x11A\x3\x2\x2\x2\x119\x117\x3\x2"+
		"\x2\x2\x11A\x11E\x5 \x11\x2\x11B\x11D\x5\x18\r\x2\x11C\x11B\x3\x2\x2\x2"+
		"\x11D\x120\x3\x2\x2\x2\x11E\x11C\x3\x2\x2\x2\x11E\x11F\x3\x2\x2\x2\x11F"+
		"#\x3\x2\x2\x2\x120\x11E\x3\x2\x2\x2\x121\x123\x5\x18\r\x2\x122\x121\x3"+
		"\x2\x2\x2\x123\x126\x3\x2\x2\x2\x124\x122\x3\x2\x2\x2\x124\x125\x3\x2"+
		"\x2\x2\x125\x127\x3\x2\x2\x2\x126\x124\x3\x2\x2\x2\x127\x12B\a\x1E\x2"+
		"\x2\x128\x12A\x5\x18\r\x2\x129\x128\x3\x2\x2\x2\x12A\x12D\x3\x2\x2\x2"+
		"\x12B\x129\x3\x2\x2\x2\x12B\x12C\x3\x2\x2\x2\x12C\x130\x3\x2\x2\x2\x12D"+
		"\x12B\x3\x2\x2\x2\x12E\x131\x5\x1E\x10\x2\x12F\x131\x5\"\x12\x2\x130\x12E"+
		"\x3\x2\x2\x2\x130\x12F\x3\x2\x2\x2\x131\x145\x3\x2\x2\x2\x132\x134\x5"+
		"\x18\r\x2\x133\x132\x3\x2\x2\x2\x134\x137\x3\x2\x2\x2\x135\x133\x3\x2"+
		"\x2\x2\x135\x136\x3\x2\x2\x2\x136\x138\x3\x2\x2\x2\x137\x135\x3\x2\x2"+
		"\x2\x138\x13C\a\n\x2\x2\x139\x13B\x5\x18\r\x2\x13A\x139\x3\x2\x2\x2\x13B"+
		"\x13E\x3\x2\x2\x2\x13C\x13A\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x141"+
		"\x3\x2\x2\x2\x13E\x13C\x3\x2\x2\x2\x13F\x142\x5\x1E\x10\x2\x140\x142\x5"+
		"\"\x12\x2\x141\x13F\x3\x2\x2\x2\x141\x140\x3\x2\x2\x2\x142\x144\x3\x2"+
		"\x2\x2\x143\x135\x3\x2\x2\x2\x144\x147\x3\x2\x2\x2\x145\x143\x3\x2\x2"+
		"\x2\x145\x146\x3\x2\x2\x2\x146\x14B\x3\x2\x2\x2\x147\x145\x3\x2\x2\x2"+
		"\x148\x14A\x5\x18\r\x2\x149\x148\x3\x2\x2\x2\x14A\x14D\x3\x2\x2\x2\x14B"+
		"\x149\x3\x2\x2\x2\x14B\x14C\x3\x2\x2\x2\x14C\x14E\x3\x2\x2\x2\x14D\x14B"+
		"\x3\x2\x2\x2\x14E\x152\a\x1F\x2\x2\x14F\x151\x5\x18\r\x2\x150\x14F\x3"+
		"\x2\x2\x2\x151\x154\x3\x2\x2\x2\x152\x150\x3\x2\x2\x2\x152\x153\x3\x2"+
		"\x2\x2\x153%\x3\x2\x2\x2\x154\x152\x3\x2\x2\x2\x32*/\x33\x37<?\x44JPR"+
		"Z_hry\x80\x87\x8E\x99\x9F\xA6\xAD\xB4\xBD\xC4\xC9\xCB\xD8\xDF\xE9\xEF"+
		"\xF4\xFB\x101\x105\x10B\x111\x117\x11E\x124\x12B\x130\x135\x13C\x141\x145"+
		"\x14B\x152";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace EntityQueryLanguage.Grammer
