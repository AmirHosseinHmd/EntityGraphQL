//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5-rc002
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/lukemurray/Projects/github/EntityQueryLanguage/src/EntityQueryLanguage/Grammer/EqlGrammer.g4 by ANTLR 4.6.5-rc002

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace EntityQueryLanguage.Grammer {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5-rc002")]
public partial class EqlGrammerParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9,
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17,
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24,
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, ID=31, DIGIT=32,
		STRING_CHARS=33;
	public const int
		RULE_identity = 0, RULE_callPath = 1, RULE_int = 2, RULE_decimal = 3,
		RULE_string = 4, RULE_constant = 5, RULE_call = 6, RULE_gqlcall = 7, RULE_args = 8,
		RULE_gqlargs = 9, RULE_gqlarg = 10, RULE_operator = 11, RULE_expression = 12,
		RULE_startRule = 13, RULE_ws = 14, RULE_queryKeyword = 15, RULE_field = 16,
		RULE_aliasType = 17, RULE_aliasExp = 18, RULE_fieldSelect = 19, RULE_entityQuery = 20,
		RULE_dataQuery = 21;
	public static readonly string[] ruleNames = {
		"identity", "callPath", "int", "decimal", "string", "constant", "call",
		"gqlcall", "args", "gqlargs", "gqlarg", "operator", "expression", "startRule",
		"ws", "queryKeyword", "field", "aliasType", "aliasExp", "fieldSelect",
		"entityQuery", "dataQuery"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'-'", "'''", "'\n'", "'\r'", "'('", "')'", "','", "':'",
		"'+'", "'%'", "'^'", "'and'", "'*'", "'or'", "'='", "'<='", "'>='", "'<'",
		"'>'", "'/'", "'if'", "' '", "'then'", "'else'", "'?'", "'\t'", "'query'",
		"'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, "ID", "DIGIT", "STRING_CHARS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EqlGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public EqlGrammerParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class IdentityContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(EqlGrammerParser.ID, 0); }
		public IdentityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identity; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentityContext identity() {
		IdentityContext _localctx = new IdentityContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_identity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallPathContext : ParserRuleContext {
		public IdentityContext[] identity() {
			return GetRuleContexts<IdentityContext>();
		}
		public IdentityContext identity(int i) {
			return GetRuleContext<IdentityContext>(i);
		}
		public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public GqlcallContext[] gqlcall() {
			return GetRuleContexts<GqlcallContext>();
		}
		public GqlcallContext gqlcall(int i) {
			return GetRuleContext<GqlcallContext>(i);
		}
		public CallPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callPath; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallPathContext callPath() {
		CallPathContext _localctx = new CallPathContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_callPath);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 46; identity();
				}
				break;

			case 2:
				{
				State = 47; call();
				}
				break;

			case 3:
				{
				State = 48; gqlcall();
				}
				break;
			}
			State = 59;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 51; Match(T__0);
					State = 55;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
					case 1:
						{
						State = 52; identity();
						}
						break;

					case 2:
						{
						State = 53; call();
						}
						break;

					case 3:
						{
						State = 54; gqlcall();
						}
						break;
					}
					}
					}
				}
				State = 61;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(EqlGrammerParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(EqlGrammerParser.DIGIT, i);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_int);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 62; Match(T__1);
				}
			}

			State = 66;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 65; Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 68;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(EqlGrammerParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(EqlGrammerParser.DIGIT, i);
		}
		public DecimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalContext @decimal() {
		DecimalContext _localctx = new DecimalContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_decimal);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 70; Match(T__1);
				}
			}

			State = 74;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 73; Match(DIGIT);
				}
				}
				State = 76;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==DIGIT );
			State = 78; Match(T__0);
			State = 80;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 79; Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 82;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode[] STRING_CHARS() { return GetTokens(EqlGrammerParser.STRING_CHARS); }
		public ITerminalNode STRING_CHARS(int i) {
			return GetToken(EqlGrammerParser.STRING_CHARS, i);
		}
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_string);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(T__2);
			State = 90;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					State = 88;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
					case 1:
						{
						State = 85; Match(T__2);
						}
						break;

					case 2:
						{
						State = 86;
						_la = _input.La(1);
						if ( _la <= 0 || (_la==T__3 || _la==T__4) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 3:
						{
						State = 87; Match(STRING_CHARS);
						}
						break;
					}
					}
				}
				State = 92;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			State = 93; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecimalContext @decimal() {
			return GetRuleContext<DecimalContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_constant);
		try {
			State = 98;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95; @string();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96; @int();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 97; @decimal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public IdentityContext method;
		public ArgsContext arguments;
		public IdentityContext identity() {
			return GetRuleContext<IdentityContext>(0);
		}
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; _localctx.method = identity();
			State = 101; Match(T__5);
			State = 103;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__5) | (1L << T__21) | (1L << ID) | (1L << DIGIT))) != 0)) {
				{
				State = 102; _localctx.arguments = args();
				}
			}

			State = 105; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GqlcallContext : ParserRuleContext {
		public IdentityContext method;
		public GqlargsContext gqlarguments;
		public IdentityContext identity() {
			return GetRuleContext<IdentityContext>(0);
		}
		public GqlargsContext gqlargs() {
			return GetRuleContext<GqlargsContext>(0);
		}
		public GqlcallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gqlcall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGqlcall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GqlcallContext gqlcall() {
		GqlcallContext _localctx = new GqlcallContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_gqlcall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; _localctx.method = identity();
			State = 108; Match(T__5);
			State = 109; _localctx.gqlarguments = gqlargs();
			State = 110; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; expression(0);
			State = 117;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__7) {
				{
				{
				State = 113; Match(T__7);
				State = 114; expression(0);
				}
				}
				State = 119;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GqlargsContext : ParserRuleContext {
		public GqlargContext[] gqlarg() {
			return GetRuleContexts<GqlargContext>();
		}
		public GqlargContext gqlarg(int i) {
			return GetRuleContext<GqlargContext>(i);
		}
		public GqlargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gqlargs; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGqlargs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GqlargsContext gqlargs() {
		GqlargsContext _localctx = new GqlargsContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_gqlargs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; gqlarg();
			State = 125;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__7) {
				{
				{
				State = 121; Match(T__7);
				State = 122; gqlarg();
				}
				}
				State = 127;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GqlargContext : ParserRuleContext {
		public IdentityContext gqlfield;
		public ExpressionContext gqlvalue;
		public IdentityContext identity() {
			return GetRuleContext<IdentityContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public GqlargContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gqlarg; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGqlarg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GqlargContext gqlarg() {
		GqlargContext _localctx = new GqlargContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_gqlarg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; _localctx.gqlfield = identity();
			State = 132;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__22) | (1L << T__26))) != 0)) {
				{
				{
				State = 129; ws();
				}
				}
				State = 134;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 135; Match(T__8);
			State = 139;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__22) | (1L << T__26))) != 0)) {
				{
				{
				State = 136; ws();
				}
				}
				State = 141;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 142; _localctx.gqlvalue = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }

		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfThenElseContext : ExpressionContext {
		public ExpressionContext test;
		public ExpressionContext ifTrue;
		public ExpressionContext ifFalse;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfThenElseContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfThenElseInlineContext : ExpressionContext {
		public ExpressionContext test;
		public ExpressionContext ifTrue;
		public ExpressionContext ifFalse;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfThenElseInlineContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElseInline(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryContext : ExpressionContext {
		public ExpressionContext left;
		public OperatorContext op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public BinaryContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprContext : ExpressionContext {
		public ExpressionContext body;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallOrIdContext : ExpressionContext {
		public CallPathContext callPath() {
			return GetRuleContext<CallPathContext>(0);
		}
		public CallOrIdContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallOrId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__21:
				{
				_localctx = new IfThenElseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 147; Match(T__21);
				State = 151;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__22) {
					{
					{
					State = 148; Match(T__22);
					}
					}
					State = 153;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 154; ((IfThenElseContext)_localctx).test = expression(0);
				State = 158;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__22) {
					{
					{
					State = 155; Match(T__22);
					}
					}
					State = 160;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 161; Match(T__23);
				State = 165;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__22) {
					{
					{
					State = 162; Match(T__22);
					}
					}
					State = 167;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 168; ((IfThenElseContext)_localctx).ifTrue = expression(0);
				State = 172;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__22) {
					{
					{
					State = 169; Match(T__22);
					}
					}
					State = 174;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 175; Match(T__24);
				State = 179;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__22) {
					{
					{
					State = 176; Match(T__22);
					}
					}
					State = 181;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 182; ((IfThenElseContext)_localctx).ifFalse = expression(6);
				}
				break;
			case T__5:
				{
				_localctx = new ExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 184; Match(T__5);
				State = 185; ((ExprContext)_localctx).body = expression(0);
				State = 186; Match(T__6);
				}
				break;
			case ID:
				{
				_localctx = new CallOrIdContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 188; callPath();
				}
				break;
			case T__1:
			case T__2:
			case DIGIT:
				{
				_localctx = new ConstContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 189; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 240;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 238;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
					case 1:
						{
						_localctx = new IfThenElseInlineContext(new ExpressionContext(_parentctx, _parentState));
						((IfThenElseInlineContext)_localctx).test = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 192;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 196;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__22) {
							{
							{
							State = 193; Match(T__22);
							}
							}
							State = 198;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 199; Match(T__25);
						State = 203;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__22) {
							{
							{
							State = 200; Match(T__22);
							}
							}
							State = 205;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 206; ((IfThenElseInlineContext)_localctx).ifTrue = expression(0);
						State = 210;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__22) {
							{
							{
							State = 207; Match(T__22);
							}
							}
							State = 212;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 213; Match(T__8);
						State = 217;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__22) {
							{
							{
							State = 214; Match(T__22);
							}
							}
							State = 219;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 220; ((IfThenElseInlineContext)_localctx).ifFalse = expression(6);
						}
						break;

					case 2:
						{
						_localctx = new BinaryContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 222;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 226;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__22) {
							{
							{
							State = 223; Match(T__22);
							}
							}
							State = 228;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 229; ((BinaryContext)_localctx).op = @operator();
						State = 233;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__22) {
							{
							{
							State = 230; Match(T__22);
							}
							}
							State = 235;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 236; ((BinaryContext)_localctx).right = expression(5);
						}
						break;
					}
					}
				}
				State = 242;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StartRuleContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WsContext : ParserRuleContext {
		public WsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ws; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WsContext ws() {
		WsContext _localctx = new WsContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_ws);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__22) | (1L << T__26))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryKeywordContext : ParserRuleContext {
		public QueryKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryKeyword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryKeywordContext queryKeyword() {
		QueryKeywordContext _localctx = new QueryKeywordContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_queryKeyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; Match(T__27);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public CallPathContext callPath() {
			return GetRuleContext<CallPathContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; callPath();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasTypeContext : ParserRuleContext {
		public IdentityContext name;
		public IdentityContext identity() {
			return GetRuleContext<IdentityContext>(0);
		}
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public AliasTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasTypeContext aliasType() {
		AliasTypeContext _localctx = new AliasTypeContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_aliasType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; _localctx.name = identity();
			State = 255;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__22) | (1L << T__26))) != 0)) {
				{
				{
				State = 252; ws();
				}
				}
				State = 257;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 258; Match(T__8);
			State = 262;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__22) | (1L << T__26))) != 0)) {
				{
				{
				State = 259; ws();
				}
				}
				State = 264;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasExpContext : ParserRuleContext {
		public AliasTypeContext alias;
		public ExpressionContext entity;
		public AliasTypeContext aliasType() {
			return GetRuleContext<AliasTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AliasExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasExp; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasExpContext aliasExp() {
		AliasExpContext _localctx = new AliasExpContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_aliasExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; _localctx.alias = aliasType();
			State = 266; _localctx.entity = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldSelectContext : ParserRuleContext {
		public AliasExpContext[] aliasExp() {
			return GetRuleContexts<AliasExpContext>();
		}
		public AliasExpContext aliasExp(int i) {
			return GetRuleContext<AliasExpContext>(i);
		}
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public EntityQueryContext[] entityQuery() {
			return GetRuleContexts<EntityQueryContext>();
		}
		public EntityQueryContext entityQuery(int i) {
			return GetRuleContext<EntityQueryContext>(i);
		}
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public FieldSelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldSelect; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldSelectContext fieldSelect() {
		FieldSelectContext _localctx = new FieldSelectContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_fieldSelect);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; Match(T__28);
			State = 272;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__22) | (1L << T__26))) != 0)) {
				{
				{
				State = 269; ws();
				}
				}
				State = 274;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 278;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				State = 275; aliasExp();
				}
				break;

			case 2:
				{
				State = 276; field();
				}
				break;

			case 3:
				{
				State = 277; entityQuery();
				}
				break;
			}
			State = 300;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 283;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__22) | (1L << T__26))) != 0)) {
						{
						{
						State = 280; ws();
						}
						}
						State = 285;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 286; Match(T__7);
					State = 290;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__22) | (1L << T__26))) != 0)) {
						{
						{
						State = 287; ws();
						}
						}
						State = 292;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 296;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
					case 1:
						{
						State = 293; aliasExp();
						}
						break;

					case 2:
						{
						State = 294; field();
						}
						break;

					case 3:
						{
						State = 295; entityQuery();
						}
						break;
					}
					}
					}
				}
				State = 302;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			}
			State = 306;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__22) | (1L << T__26))) != 0)) {
				{
				{
				State = 303; ws();
				}
				}
				State = 308;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 309; Match(T__29);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityQueryContext : ParserRuleContext {
		public AliasTypeContext alias;
		public CallPathContext entity;
		public FieldSelectContext fields;
		public CallPathContext callPath() {
			return GetRuleContext<CallPathContext>(0);
		}
		public FieldSelectContext fieldSelect() {
			return GetRuleContext<FieldSelectContext>(0);
		}
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public AliasTypeContext aliasType() {
			return GetRuleContext<AliasTypeContext>(0);
		}
		public EntityQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityQueryContext entityQuery() {
		EntityQueryContext _localctx = new EntityQueryContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_entityQuery);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				State = 311; _localctx.alias = aliasType();
				}
				break;
			}
			State = 314; _localctx.entity = callPath();
			State = 318;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__22) | (1L << T__26))) != 0)) {
				{
				{
				State = 315; ws();
				}
				}
				State = 320;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 321; _localctx.fields = fieldSelect();
			State = 325;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,41,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 322; ws();
					}
					}
				}
				State = 327;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,41,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataQueryContext : ParserRuleContext {
		public AliasExpContext[] aliasExp() {
			return GetRuleContexts<AliasExpContext>();
		}
		public AliasExpContext aliasExp(int i) {
			return GetRuleContext<AliasExpContext>(i);
		}
		public EntityQueryContext[] entityQuery() {
			return GetRuleContexts<EntityQueryContext>();
		}
		public EntityQueryContext entityQuery(int i) {
			return GetRuleContext<EntityQueryContext>(i);
		}
		public QueryKeywordContext queryKeyword() {
			return GetRuleContext<QueryKeywordContext>(0);
		}
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public DataQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataQueryContext dataQuery() {
		DataQueryContext _localctx = new DataQueryContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_dataQuery);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__27) {
				{
				State = 328; queryKeyword();
				}
			}

			State = 334;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__22) | (1L << T__26))) != 0)) {
				{
				{
				State = 331; ws();
				}
				}
				State = 336;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 337; Match(T__28);
			State = 341;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__22) | (1L << T__26))) != 0)) {
				{
				{
				State = 338; ws();
				}
				}
				State = 343;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 346;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				State = 344; aliasExp();
				}
				break;

			case 2:
				{
				State = 345; entityQuery();
				}
				break;
			}
			State = 367;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,49,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 351;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__22) | (1L << T__26))) != 0)) {
						{
						{
						State = 348; ws();
						}
						}
						State = 353;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 354; Match(T__7);
					State = 358;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__22) | (1L << T__26))) != 0)) {
						{
						{
						State = 355; ws();
						}
						}
						State = 360;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 363;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
					case 1:
						{
						State = 361; aliasExp();
						}
						break;

					case 2:
						{
						State = 362; entityQuery();
						}
						break;
					}
					}
					}
				}
				State = 369;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,49,_ctx);
			}
			State = 373;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__22) | (1L << T__26))) != 0)) {
				{
				{
				State = 370; ws();
				}
				}
				State = 375;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 376; Match(T__29);
			State = 380;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__22) | (1L << T__26))) != 0)) {
				{
				{
				State = 377; ws();
				}
				}
				State = 382;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3#\x182\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x5\x3\x34\n\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3:\n\x3\a\x3<\n\x3\f\x3\xE\x3?\v\x3\x3\x4"+
		"\x5\x4\x42\n\x4\x3\x4\x6\x4\x45\n\x4\r\x4\xE\x4\x46\x3\x5\x5\x5J\n\x5"+
		"\x3\x5\x6\x5M\n\x5\r\x5\xE\x5N\x3\x5\x3\x5\x6\x5S\n\x5\r\x5\xE\x5T\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\a\x6[\n\x6\f\x6\xE\x6^\v\x6\x3\x6\x3\x6\x3\a\x3"+
		"\a\x3\a\x5\a\x65\n\a\x3\b\x3\b\x3\b\x5\bj\n\b\x3\b\x3\b\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\n\x3\n\x3\n\a\nv\n\n\f\n\xE\ny\v\n\x3\v\x3\v\x3\v\a\v~\n"+
		"\v\f\v\xE\v\x81\v\v\x3\f\x3\f\a\f\x85\n\f\f\f\xE\f\x88\v\f\x3\f\x3\f\a"+
		"\f\x8C\n\f\f\f\xE\f\x8F\v\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\a\xE"+
		"\x98\n\xE\f\xE\xE\xE\x9B\v\xE\x3\xE\x3\xE\a\xE\x9F\n\xE\f\xE\xE\xE\xA2"+
		"\v\xE\x3\xE\x3\xE\a\xE\xA6\n\xE\f\xE\xE\xE\xA9\v\xE\x3\xE\x3\xE\a\xE\xAD"+
		"\n\xE\f\xE\xE\xE\xB0\v\xE\x3\xE\x3\xE\a\xE\xB4\n\xE\f\xE\xE\xE\xB7\v\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\xC1\n\xE\x3\xE"+
		"\x3\xE\a\xE\xC5\n\xE\f\xE\xE\xE\xC8\v\xE\x3\xE\x3\xE\a\xE\xCC\n\xE\f\xE"+
		"\xE\xE\xCF\v\xE\x3\xE\x3\xE\a\xE\xD3\n\xE\f\xE\xE\xE\xD6\v\xE\x3\xE\x3"+
		"\xE\a\xE\xDA\n\xE\f\xE\xE\xE\xDD\v\xE\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\xE3"+
		"\n\xE\f\xE\xE\xE\xE6\v\xE\x3\xE\x3\xE\a\xE\xEA\n\xE\f\xE\xE\xE\xED\v\xE"+
		"\x3\xE\x3\xE\a\xE\xF1\n\xE\f\xE\xE\xE\xF4\v\xE\x3\xF\x3\xF\x3\x10\x3\x10"+
		"\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\a\x13\x100\n\x13\f\x13\xE\x13"+
		"\x103\v\x13\x3\x13\x3\x13\a\x13\x107\n\x13\f\x13\xE\x13\x10A\v\x13\x3"+
		"\x14\x3\x14\x3\x14\x3\x15\x3\x15\a\x15\x111\n\x15\f\x15\xE\x15\x114\v"+
		"\x15\x3\x15\x3\x15\x3\x15\x5\x15\x119\n\x15\x3\x15\a\x15\x11C\n\x15\f"+
		"\x15\xE\x15\x11F\v\x15\x3\x15\x3\x15\a\x15\x123\n\x15\f\x15\xE\x15\x126"+
		"\v\x15\x3\x15\x3\x15\x3\x15\x5\x15\x12B\n\x15\a\x15\x12D\n\x15\f\x15\xE"+
		"\x15\x130\v\x15\x3\x15\a\x15\x133\n\x15\f\x15\xE\x15\x136\v\x15\x3\x15"+
		"\x3\x15\x3\x16\x5\x16\x13B\n\x16\x3\x16\x3\x16\a\x16\x13F\n\x16\f\x16"+
		"\xE\x16\x142\v\x16\x3\x16\x3\x16\a\x16\x146\n\x16\f\x16\xE\x16\x149\v"+
		"\x16\x3\x17\x5\x17\x14C\n\x17\x3\x17\a\x17\x14F\n\x17\f\x17\xE\x17\x152"+
		"\v\x17\x3\x17\x3\x17\a\x17\x156\n\x17\f\x17\xE\x17\x159\v\x17\x3\x17\x3"+
		"\x17\x5\x17\x15D\n\x17\x3\x17\a\x17\x160\n\x17\f\x17\xE\x17\x163\v\x17"+
		"\x3\x17\x3\x17\a\x17\x167\n\x17\f\x17\xE\x17\x16A\v\x17\x3\x17\x3\x17"+
		"\x5\x17\x16E\n\x17\a\x17\x170\n\x17\f\x17\xE\x17\x173\v\x17\x3\x17\a\x17"+
		"\x176\n\x17\f\x17\xE\x17\x179\v\x17\x3\x17\x3\x17\a\x17\x17D\n\x17\f\x17"+
		"\xE\x17\x180\v\x17\x3\x17\x3\\\x2\x3\x1A\x18\x2\x2\x4\x2\x6\x2\b\x2\n"+
		"\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2"+
		" \x2\"\x2$\x2&\x2(\x2*\x2,\x2\x2\x5\x3\x2\x6\a\x4\x2\x4\x4\f\x17\x5\x2"+
		"\x6\a\x19\x19\x1D\x1D\x1A7\x2.\x3\x2\x2\x2\x4\x33\x3\x2\x2\x2\x6\x41\x3"+
		"\x2\x2\x2\bI\x3\x2\x2\x2\nV\x3\x2\x2\x2\f\x64\x3\x2\x2\x2\xE\x66\x3\x2"+
		"\x2\x2\x10m\x3\x2\x2\x2\x12r\x3\x2\x2\x2\x14z\x3\x2\x2\x2\x16\x82\x3\x2"+
		"\x2\x2\x18\x92\x3\x2\x2\x2\x1A\xC0\x3\x2\x2\x2\x1C\xF5\x3\x2\x2\x2\x1E"+
		"\xF7\x3\x2\x2\x2 \xF9\x3\x2\x2\x2\"\xFB\x3\x2\x2\x2$\xFD\x3\x2\x2\x2&"+
		"\x10B\x3\x2\x2\x2(\x10E\x3\x2\x2\x2*\x13A\x3\x2\x2\x2,\x14B\x3\x2\x2\x2"+
		"./\a!\x2\x2/\x3\x3\x2\x2\x2\x30\x34\x5\x2\x2\x2\x31\x34\x5\xE\b\x2\x32"+
		"\x34\x5\x10\t\x2\x33\x30\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x33\x32\x3\x2"+
		"\x2\x2\x34=\x3\x2\x2\x2\x35\x39\a\x3\x2\x2\x36:\x5\x2\x2\x2\x37:\x5\xE"+
		"\b\x2\x38:\x5\x10\t\x2\x39\x36\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2\x39\x38"+
		"\x3\x2\x2\x2:<\x3\x2\x2\x2;\x35\x3\x2\x2\x2<?\x3\x2\x2\x2=;\x3\x2\x2\x2"+
		"=>\x3\x2\x2\x2>\x5\x3\x2\x2\x2?=\x3\x2\x2\x2@\x42\a\x4\x2\x2\x41@\x3\x2"+
		"\x2\x2\x41\x42\x3\x2\x2\x2\x42\x44\x3\x2\x2\x2\x43\x45\a\"\x2\x2\x44\x43"+
		"\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2\x46G\x3\x2\x2\x2"+
		"G\a\x3\x2\x2\x2HJ\a\x4\x2\x2IH\x3\x2\x2\x2IJ\x3\x2\x2\x2JL\x3\x2\x2\x2"+
		"KM\a\"\x2\x2LK\x3\x2\x2\x2MN\x3\x2\x2\x2NL\x3\x2\x2\x2NO\x3\x2\x2\x2O"+
		"P\x3\x2\x2\x2PR\a\x3\x2\x2QS\a\"\x2\x2RQ\x3\x2\x2\x2ST\x3\x2\x2\x2TR\x3"+
		"\x2\x2\x2TU\x3\x2\x2\x2U\t\x3\x2\x2\x2V\\\a\x5\x2\x2W[\a\x5\x2\x2X[\n"+
		"\x2\x2\x2Y[\a#\x2\x2ZW\x3\x2\x2\x2ZX\x3\x2\x2\x2ZY\x3\x2\x2\x2[^\x3\x2"+
		"\x2\x2\\]\x3\x2\x2\x2\\Z\x3\x2\x2\x2]_\x3\x2\x2\x2^\\\x3\x2\x2\x2_`\a"+
		"\x5\x2\x2`\v\x3\x2\x2\x2\x61\x65\x5\n\x6\x2\x62\x65\x5\x6\x4\x2\x63\x65"+
		"\x5\b\x5\x2\x64\x61\x3\x2\x2\x2\x64\x62\x3\x2\x2\x2\x64\x63\x3\x2\x2\x2"+
		"\x65\r\x3\x2\x2\x2\x66g\x5\x2\x2\x2gi\a\b\x2\x2hj\x5\x12\n\x2ih\x3\x2"+
		"\x2\x2ij\x3\x2\x2\x2jk\x3\x2\x2\x2kl\a\t\x2\x2l\xF\x3\x2\x2\x2mn\x5\x2"+
		"\x2\x2no\a\b\x2\x2op\x5\x14\v\x2pq\a\t\x2\x2q\x11\x3\x2\x2\x2rw\x5\x1A"+
		"\xE\x2st\a\n\x2\x2tv\x5\x1A\xE\x2us\x3\x2\x2\x2vy\x3\x2\x2\x2wu\x3\x2"+
		"\x2\x2wx\x3\x2\x2\x2x\x13\x3\x2\x2\x2yw\x3\x2\x2\x2z\x7F\x5\x16\f\x2{"+
		"|\a\n\x2\x2|~\x5\x16\f\x2}{\x3\x2\x2\x2~\x81\x3\x2\x2\x2\x7F}\x3\x2\x2"+
		"\x2\x7F\x80\x3\x2\x2\x2\x80\x15\x3\x2\x2\x2\x81\x7F\x3\x2\x2\x2\x82\x86"+
		"\x5\x2\x2\x2\x83\x85\x5\x1E\x10\x2\x84\x83\x3\x2\x2\x2\x85\x88\x3\x2\x2"+
		"\x2\x86\x84\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87\x89\x3\x2\x2\x2\x88\x86"+
		"\x3\x2\x2\x2\x89\x8D\a\v\x2\x2\x8A\x8C\x5\x1E\x10\x2\x8B\x8A\x3\x2\x2"+
		"\x2\x8C\x8F\x3\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8D\x8E\x3\x2\x2\x2\x8E\x90"+
		"\x3\x2\x2\x2\x8F\x8D\x3\x2\x2\x2\x90\x91\x5\x1A\xE\x2\x91\x17\x3\x2\x2"+
		"\x2\x92\x93\t\x3\x2\x2\x93\x19\x3\x2\x2\x2\x94\x95\b\xE\x1\x2\x95\x99"+
		"\a\x18\x2\x2\x96\x98\a\x19\x2\x2\x97\x96\x3\x2\x2\x2\x98\x9B\x3\x2\x2"+
		"\x2\x99\x97\x3\x2\x2\x2\x99\x9A\x3\x2\x2\x2\x9A\x9C\x3\x2\x2\x2\x9B\x99"+
		"\x3\x2\x2\x2\x9C\xA0\x5\x1A\xE\x2\x9D\x9F\a\x19\x2\x2\x9E\x9D\x3\x2\x2"+
		"\x2\x9F\xA2\x3\x2\x2\x2\xA0\x9E\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\xA3"+
		"\x3\x2\x2\x2\xA2\xA0\x3\x2\x2\x2\xA3\xA7\a\x1A\x2\x2\xA4\xA6\a\x19\x2"+
		"\x2\xA5\xA4\x3\x2\x2\x2\xA6\xA9\x3\x2\x2\x2\xA7\xA5\x3\x2\x2\x2\xA7\xA8"+
		"\x3\x2\x2\x2\xA8\xAA\x3\x2\x2\x2\xA9\xA7\x3\x2\x2\x2\xAA\xAE\x5\x1A\xE"+
		"\x2\xAB\xAD\a\x19\x2\x2\xAC\xAB\x3\x2\x2\x2\xAD\xB0\x3\x2\x2\x2\xAE\xAC"+
		"\x3\x2\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF\xB1\x3\x2\x2\x2\xB0\xAE\x3\x2\x2"+
		"\x2\xB1\xB5\a\x1B\x2\x2\xB2\xB4\a\x19\x2\x2\xB3\xB2\x3\x2\x2\x2\xB4\xB7"+
		"\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xB8\x3\x2\x2"+
		"\x2\xB7\xB5\x3\x2\x2\x2\xB8\xB9\x5\x1A\xE\b\xB9\xC1\x3\x2\x2\x2\xBA\xBB"+
		"\a\b\x2\x2\xBB\xBC\x5\x1A\xE\x2\xBC\xBD\a\t\x2\x2\xBD\xC1\x3\x2\x2\x2"+
		"\xBE\xC1\x5\x4\x3\x2\xBF\xC1\x5\f\a\x2\xC0\x94\x3\x2\x2\x2\xC0\xBA\x3"+
		"\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC0\xBF\x3\x2\x2\x2\xC1\xF2\x3\x2\x2\x2"+
		"\xC2\xC6\f\a\x2\x2\xC3\xC5\a\x19\x2\x2\xC4\xC3\x3\x2\x2\x2\xC5\xC8\x3"+
		"\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC6\xC7\x3\x2\x2\x2\xC7\xC9\x3\x2\x2\x2"+
		"\xC8\xC6\x3\x2\x2\x2\xC9\xCD\a\x1C\x2\x2\xCA\xCC\a\x19\x2\x2\xCB\xCA\x3"+
		"\x2\x2\x2\xCC\xCF\x3\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2"+
		"\xCE\xD0\x3\x2\x2\x2\xCF\xCD\x3\x2\x2\x2\xD0\xD4\x5\x1A\xE\x2\xD1\xD3"+
		"\a\x19\x2\x2\xD2\xD1\x3\x2\x2\x2\xD3\xD6\x3\x2\x2\x2\xD4\xD2\x3\x2\x2"+
		"\x2\xD4\xD5\x3\x2\x2\x2\xD5\xD7\x3\x2\x2\x2\xD6\xD4\x3\x2\x2\x2\xD7\xDB"+
		"\a\v\x2\x2\xD8\xDA\a\x19\x2\x2\xD9\xD8\x3\x2\x2\x2\xDA\xDD\x3\x2\x2\x2"+
		"\xDB\xD9\x3\x2\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC\xDE\x3\x2\x2\x2\xDD\xDB\x3"+
		"\x2\x2\x2\xDE\xDF\x5\x1A\xE\b\xDF\xF1\x3\x2\x2\x2\xE0\xE4\f\x6\x2\x2\xE1"+
		"\xE3\a\x19\x2\x2\xE2\xE1\x3\x2\x2\x2\xE3\xE6\x3\x2\x2\x2\xE4\xE2\x3\x2"+
		"\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5\xE7\x3\x2\x2\x2\xE6\xE4\x3\x2\x2\x2\xE7"+
		"\xEB\x5\x18\r\x2\xE8\xEA\a\x19\x2\x2\xE9\xE8\x3\x2\x2\x2\xEA\xED\x3\x2"+
		"\x2\x2\xEB\xE9\x3\x2\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC\xEE\x3\x2\x2\x2\xED"+
		"\xEB\x3\x2\x2\x2\xEE\xEF\x5\x1A\xE\a\xEF\xF1\x3\x2\x2\x2\xF0\xC2\x3\x2"+
		"\x2\x2\xF0\xE0\x3\x2\x2\x2\xF1\xF4\x3\x2\x2\x2\xF2\xF0\x3\x2\x2\x2\xF2"+
		"\xF3\x3\x2\x2\x2\xF3\x1B\x3\x2\x2\x2\xF4\xF2\x3\x2\x2\x2\xF5\xF6\x5\x1A"+
		"\xE\x2\xF6\x1D\x3\x2\x2\x2\xF7\xF8\t\x4\x2\x2\xF8\x1F\x3\x2\x2\x2\xF9"+
		"\xFA\a\x1E\x2\x2\xFA!\x3\x2\x2\x2\xFB\xFC\x5\x4\x3\x2\xFC#\x3\x2\x2\x2"+
		"\xFD\x101\x5\x2\x2\x2\xFE\x100\x5\x1E\x10\x2\xFF\xFE\x3\x2\x2\x2\x100"+
		"\x103\x3\x2\x2\x2\x101\xFF\x3\x2\x2\x2\x101\x102\x3\x2\x2\x2\x102\x104"+
		"\x3\x2\x2\x2\x103\x101\x3\x2\x2\x2\x104\x108\a\v\x2\x2\x105\x107\x5\x1E"+
		"\x10\x2\x106\x105\x3\x2\x2\x2\x107\x10A\x3\x2\x2\x2\x108\x106\x3\x2\x2"+
		"\x2\x108\x109\x3\x2\x2\x2\x109%\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10B"+
		"\x10C\x5$\x13\x2\x10C\x10D\x5\x1A\xE\x2\x10D\'\x3\x2\x2\x2\x10E\x112\a"+
		"\x1F\x2\x2\x10F\x111\x5\x1E\x10\x2\x110\x10F\x3\x2\x2\x2\x111\x114\x3"+
		"\x2\x2\x2\x112\x110\x3\x2\x2\x2\x112\x113\x3\x2\x2\x2\x113\x118\x3\x2"+
		"\x2\x2\x114\x112\x3\x2\x2\x2\x115\x119\x5&\x14\x2\x116\x119\x5\"\x12\x2"+
		"\x117\x119\x5*\x16\x2\x118\x115\x3\x2\x2\x2\x118\x116\x3\x2\x2\x2\x118"+
		"\x117\x3\x2\x2\x2\x119\x12E\x3\x2\x2\x2\x11A\x11C\x5\x1E\x10\x2\x11B\x11A"+
		"\x3\x2\x2\x2\x11C\x11F\x3\x2\x2\x2\x11D\x11B\x3\x2\x2\x2\x11D\x11E\x3"+
		"\x2\x2\x2\x11E\x120\x3\x2\x2\x2\x11F\x11D\x3\x2\x2\x2\x120\x124\a\n\x2"+
		"\x2\x121\x123\x5\x1E\x10\x2\x122\x121\x3\x2\x2\x2\x123\x126\x3\x2\x2\x2"+
		"\x124\x122\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125\x12A\x3\x2\x2\x2\x126"+
		"\x124\x3\x2\x2\x2\x127\x12B\x5&\x14\x2\x128\x12B\x5\"\x12\x2\x129\x12B"+
		"\x5*\x16\x2\x12A\x127\x3\x2\x2\x2\x12A\x128\x3\x2\x2\x2\x12A\x129\x3\x2"+
		"\x2\x2\x12B\x12D\x3\x2\x2\x2\x12C\x11D\x3\x2\x2\x2\x12D\x130\x3\x2\x2"+
		"\x2\x12E\x12C\x3\x2\x2\x2\x12E\x12F\x3\x2\x2\x2\x12F\x134\x3\x2\x2\x2"+
		"\x130\x12E\x3\x2\x2\x2\x131\x133\x5\x1E\x10\x2\x132\x131\x3\x2\x2\x2\x133"+
		"\x136\x3\x2\x2\x2\x134\x132\x3\x2\x2\x2\x134\x135\x3\x2\x2\x2\x135\x137"+
		"\x3\x2\x2\x2\x136\x134\x3\x2\x2\x2\x137\x138\a \x2\x2\x138)\x3\x2\x2\x2"+
		"\x139\x13B\x5$\x13\x2\x13A\x139\x3\x2\x2\x2\x13A\x13B\x3\x2\x2\x2\x13B"+
		"\x13C\x3\x2\x2\x2\x13C\x140\x5\x4\x3\x2\x13D\x13F\x5\x1E\x10\x2\x13E\x13D"+
		"\x3\x2\x2\x2\x13F\x142\x3\x2\x2\x2\x140\x13E\x3\x2\x2\x2\x140\x141\x3"+
		"\x2\x2\x2\x141\x143\x3\x2\x2\x2\x142\x140\x3\x2\x2\x2\x143\x147\x5(\x15"+
		"\x2\x144\x146\x5\x1E\x10\x2\x145\x144\x3\x2\x2\x2\x146\x149\x3\x2\x2\x2"+
		"\x147\x145\x3\x2\x2\x2\x147\x148\x3\x2\x2\x2\x148+\x3\x2\x2\x2\x149\x147"+
		"\x3\x2\x2\x2\x14A\x14C\x5 \x11\x2\x14B\x14A\x3\x2\x2\x2\x14B\x14C\x3\x2"+
		"\x2\x2\x14C\x150\x3\x2\x2\x2\x14D\x14F\x5\x1E\x10\x2\x14E\x14D\x3\x2\x2"+
		"\x2\x14F\x152\x3\x2\x2\x2\x150\x14E\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2"+
		"\x151\x153\x3\x2\x2\x2\x152\x150\x3\x2\x2\x2\x153\x157\a\x1F\x2\x2\x154"+
		"\x156\x5\x1E\x10\x2\x155\x154\x3\x2\x2\x2\x156\x159\x3\x2\x2\x2\x157\x155"+
		"\x3\x2\x2\x2\x157\x158\x3\x2\x2\x2\x158\x15C\x3\x2\x2\x2\x159\x157\x3"+
		"\x2\x2\x2\x15A\x15D\x5&\x14\x2\x15B\x15D\x5*\x16\x2\x15C\x15A\x3\x2\x2"+
		"\x2\x15C\x15B\x3\x2\x2\x2\x15D\x171\x3\x2\x2\x2\x15E\x160\x5\x1E\x10\x2"+
		"\x15F\x15E\x3\x2\x2\x2\x160\x163\x3\x2\x2\x2\x161\x15F\x3\x2\x2\x2\x161"+
		"\x162\x3\x2\x2\x2\x162\x164\x3\x2\x2\x2\x163\x161\x3\x2\x2\x2\x164\x168"+
		"\a\n\x2\x2\x165\x167\x5\x1E\x10\x2\x166\x165\x3\x2\x2\x2\x167\x16A\x3"+
		"\x2\x2\x2\x168\x166\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169\x16D\x3\x2"+
		"\x2\x2\x16A\x168\x3\x2\x2\x2\x16B\x16E\x5&\x14\x2\x16C\x16E\x5*\x16\x2"+
		"\x16D\x16B\x3\x2\x2\x2\x16D\x16C\x3\x2\x2\x2\x16E\x170\x3\x2\x2\x2\x16F"+
		"\x161\x3\x2\x2\x2\x170\x173\x3\x2\x2\x2\x171\x16F\x3\x2\x2\x2\x171\x172"+
		"\x3\x2\x2\x2\x172\x177\x3\x2\x2\x2\x173\x171\x3\x2\x2\x2\x174\x176\x5"+
		"\x1E\x10\x2\x175\x174\x3\x2\x2\x2\x176\x179\x3\x2\x2\x2\x177\x175\x3\x2"+
		"\x2\x2\x177\x178\x3\x2\x2\x2\x178\x17A\x3\x2\x2\x2\x179\x177\x3\x2\x2"+
		"\x2\x17A\x17E\a \x2\x2\x17B\x17D\x5\x1E\x10\x2\x17C\x17B\x3\x2\x2\x2\x17D"+
		"\x180\x3\x2\x2\x2\x17E\x17C\x3\x2\x2\x2\x17E\x17F\x3\x2\x2\x2\x17F-\x3"+
		"\x2\x2\x2\x180\x17E\x3\x2\x2\x2\x36\x33\x39=\x41\x46INTZ\\\x64iw\x7F\x86"+
		"\x8D\x99\xA0\xA7\xAE\xB5\xC0\xC6\xCD\xD4\xDB\xE4\xEB\xF0\xF2\x101\x108"+
		"\x112\x118\x11D\x124\x12A\x12E\x134\x13A\x140\x147\x14B\x150\x157\x15C"+
		"\x161\x168\x16D\x171\x177\x17E";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace EntityQueryLanguage.Grammer
