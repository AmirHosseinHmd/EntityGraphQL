//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from src/EntityQueryLanguage/Grammer/EqlGrammer.g4 by ANTLR 4.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace EntityQueryLanguage.Grammer {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5-SNAPSHOT")]
public partial class EqlGrammerParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, ID=30, DIGIT=31, STRING_CHARS=32;
	public const int
		RULE_identity = 0, RULE_callPath = 1, RULE_int = 2, RULE_decimal = 3, 
		RULE_string = 4, RULE_constant = 5, RULE_call = 6, RULE_args = 7, RULE_operator = 8, 
		RULE_expression = 9, RULE_startRule = 10, RULE_ws = 11, RULE_field = 12, 
		RULE_aliasExp = 13, RULE_fieldSelect = 14, RULE_entityQuery = 15, RULE_dataQuery = 16;
	public static readonly string[] ruleNames = {
		"identity", "callPath", "int", "decimal", "string", "constant", "call", 
		"args", "operator", "expression", "startRule", "ws", "field", "aliasExp", 
		"fieldSelect", "entityQuery", "dataQuery"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'-'", "'''", "'\n'", "'\r'", "'('", "')'", "','", "'+'", 
		"'%'", "'^'", "'and'", "'*'", "'or'", "'='", "'<='", "'>='", "'<'", "'>'", 
		"'/'", "'if'", "' '", "'then'", "'else'", "'?'", "':'", "'\t'", "'{'", 
		"'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "ID", "DIGIT", "STRING_CHARS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EqlGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public EqlGrammerParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class IdentityContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(EqlGrammerParser.ID, 0); }
		public IdentityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identity; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentityContext identity() {
		IdentityContext _localctx = new IdentityContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_identity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallPathContext : ParserRuleContext {
		public IdentityContext[] identity() {
			return GetRuleContexts<IdentityContext>();
		}
		public IdentityContext identity(int i) {
			return GetRuleContext<IdentityContext>(i);
		}
		public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public CallPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callPath; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallPathContext callPath() {
		CallPathContext _localctx = new CallPathContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_callPath);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 36; identity();
				}
				break;

			case 2:
				{
				State = 37; call();
				}
				break;
			}
			State = 47;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 40; Match(T__0);
					State = 43;
					switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
					case 1:
						{
						State = 41; identity();
						}
						break;

					case 2:
						{
						State = 42; call();
						}
						break;
					}
					}
					} 
				}
				State = 49;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(EqlGrammerParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(EqlGrammerParser.DIGIT, i);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_int);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 50; Match(T__1);
				}
			}

			State = 54;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 53; Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 56;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(EqlGrammerParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(EqlGrammerParser.DIGIT, i);
		}
		public DecimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalContext @decimal() {
		DecimalContext _localctx = new DecimalContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_decimal);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 58; Match(T__1);
				}
			}

			State = 62;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 61; Match(DIGIT);
				}
				}
				State = 64;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==DIGIT );
			State = 66; Match(T__0);
			State = 68;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 67; Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 70;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode[] STRING_CHARS() { return GetTokens(EqlGrammerParser.STRING_CHARS); }
		public ITerminalNode STRING_CHARS(int i) {
			return GetToken(EqlGrammerParser.STRING_CHARS, i);
		}
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_string);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(T__2);
			State = 78;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					State = 76;
					switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
					case 1:
						{
						State = 73; Match(T__2);
						}
						break;

					case 2:
						{
						State = 74;
						_la = _input.La(1);
						if ( _la <= 0 || (_la==T__3 || _la==T__4) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						}
						break;

					case 3:
						{
						State = 75; Match(STRING_CHARS);
						}
						break;
					}
					} 
				}
				State = 80;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			State = 81; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecimalContext @decimal() {
			return GetRuleContext<DecimalContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_constant);
		try {
			State = 86;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83; @string();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84; @int();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 85; @decimal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public IdentityContext method;
		public ArgsContext arguments;
		public IdentityContext identity() {
			return GetRuleContext<IdentityContext>(0);
		}
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; _localctx.method = identity();
			State = 89; Match(T__5);
			State = 91;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__5) | (1L << T__20) | (1L << ID) | (1L << DIGIT))) != 0)) {
				{
				State = 90; _localctx.arguments = args();
				}
			}

			State = 93; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; expression(0);
			State = 100;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__7) {
				{
				{
				State = 96; Match(T__7);
				State = 97; expression(0);
				}
				}
				State = 102;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfThenElseContext : ExpressionContext {
		public ExpressionContext test;
		public ExpressionContext ifTrue;
		public ExpressionContext ifFalse;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfThenElseContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryContext : ExpressionContext {
		public ExpressionContext left;
		public OperatorContext op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public BinaryContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfThenElseInlineContext : ExpressionContext {
		public ExpressionContext test;
		public ExpressionContext ifTrue;
		public ExpressionContext ifFalse;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfThenElseInlineContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElseInline(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprContext : ExpressionContext {
		public ExpressionContext body;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallOrIdContext : ExpressionContext {
		public CallPathContext callPath() {
			return GetRuleContext<CallPathContext>(0);
		}
		public CallOrIdContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallOrId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			switch (_input.La(1)) {
			case T__20:
				{
				_localctx = new IfThenElseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 106; Match(T__20);
				State = 110;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__21) {
					{
					{
					State = 107; Match(T__21);
					}
					}
					State = 112;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 113; ((IfThenElseContext)_localctx).test = expression(0);
				State = 117;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__21) {
					{
					{
					State = 114; Match(T__21);
					}
					}
					State = 119;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 120; Match(T__22);
				State = 124;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__21) {
					{
					{
					State = 121; Match(T__21);
					}
					}
					State = 126;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 127; ((IfThenElseContext)_localctx).ifTrue = expression(0);
				State = 131;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__21) {
					{
					{
					State = 128; Match(T__21);
					}
					}
					State = 133;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 134; Match(T__23);
				State = 138;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__21) {
					{
					{
					State = 135; Match(T__21);
					}
					}
					State = 140;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 141; ((IfThenElseContext)_localctx).ifFalse = expression(6);
				}
				break;
			case T__5:
				{
				_localctx = new ExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 143; Match(T__5);
				State = 144; ((ExprContext)_localctx).body = expression(0);
				State = 145; Match(T__6);
				}
				break;
			case ID:
				{
				_localctx = new CallOrIdContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 147; callPath();
				}
				break;
			case T__1:
			case T__2:
			case DIGIT:
				{
				_localctx = new ConstContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 148; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 199;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 197;
					switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
					case 1:
						{
						_localctx = new IfThenElseInlineContext(new ExpressionContext(_parentctx, _parentState));
						((IfThenElseInlineContext)_localctx).test = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 151;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 155;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 152; Match(T__21);
							}
							}
							State = 157;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 158; Match(T__24);
						State = 162;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 159; Match(T__21);
							}
							}
							State = 164;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 165; ((IfThenElseInlineContext)_localctx).ifTrue = expression(0);
						State = 169;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 166; Match(T__21);
							}
							}
							State = 171;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 172; Match(T__25);
						State = 176;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 173; Match(T__21);
							}
							}
							State = 178;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 179; ((IfThenElseInlineContext)_localctx).ifFalse = expression(6);
						}
						break;

					case 2:
						{
						_localctx = new BinaryContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 181;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 185;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 182; Match(T__21);
							}
							}
							State = 187;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 188; ((BinaryContext)_localctx).op = @operator();
						State = 192;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 189; Match(T__21);
							}
							}
							State = 194;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 195; ((BinaryContext)_localctx).right = expression(5);
						}
						break;
					}
					} 
				}
				State = 201;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StartRuleContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WsContext : ParserRuleContext {
		public WsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ws; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WsContext ws() {
		WsContext _localctx = new WsContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_ws);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public CallPathContext callPath() {
			return GetRuleContext<CallPathContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; callPath();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasExpContext : ParserRuleContext {
		public IdentityContext name;
		public ExpressionContext entity;
		public IdentityContext identity() {
			return GetRuleContext<IdentityContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public AliasExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasExp; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasExpContext aliasExp() {
		AliasExpContext _localctx = new AliasExpContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_aliasExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; _localctx.name = identity();
			State = 212;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 209; ws();
				}
				}
				State = 214;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 215; Match(T__25);
			State = 219;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 216; ws();
				}
				}
				State = 221;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 222; _localctx.entity = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldSelectContext : ParserRuleContext {
		public AliasExpContext[] aliasExp() {
			return GetRuleContexts<AliasExpContext>();
		}
		public AliasExpContext aliasExp(int i) {
			return GetRuleContext<AliasExpContext>(i);
		}
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public EntityQueryContext[] entityQuery() {
			return GetRuleContexts<EntityQueryContext>();
		}
		public EntityQueryContext entityQuery(int i) {
			return GetRuleContext<EntityQueryContext>(i);
		}
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public FieldSelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldSelect; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldSelectContext fieldSelect() {
		FieldSelectContext _localctx = new FieldSelectContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_fieldSelect);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; Match(T__27);
			State = 228;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 225; ws();
				}
				}
				State = 230;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 234;
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 231; aliasExp();
				}
				break;

			case 2:
				{
				State = 232; field();
				}
				break;

			case 3:
				{
				State = 233; entityQuery();
				}
				break;
			}
			State = 256;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 239;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
						{
						{
						State = 236; ws();
						}
						}
						State = 241;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 242; Match(T__7);
					State = 246;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
						{
						{
						State = 243; ws();
						}
						}
						State = 248;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 252;
					switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
					case 1:
						{
						State = 249; aliasExp();
						}
						break;

					case 2:
						{
						State = 250; field();
						}
						break;

					case 3:
						{
						State = 251; entityQuery();
						}
						break;
					}
					}
					} 
				}
				State = 258;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			State = 262;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 259; ws();
				}
				}
				State = 264;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 265; Match(T__28);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityQueryContext : ParserRuleContext {
		public AliasExpContext alias;
		public CallPathContext entity;
		public FieldSelectContext fields;
		public FieldSelectContext fieldSelect() {
			return GetRuleContext<FieldSelectContext>(0);
		}
		public AliasExpContext aliasExp() {
			return GetRuleContext<AliasExpContext>(0);
		}
		public CallPathContext callPath() {
			return GetRuleContext<CallPathContext>(0);
		}
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public EntityQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityQueryContext entityQuery() {
		EntityQueryContext _localctx = new EntityQueryContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_entityQuery);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 267; _localctx.alias = aliasExp();
				}
				break;

			case 2:
				{
				State = 268; _localctx.entity = callPath();
				}
				break;
			}
			State = 274;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 271; ws();
				}
				}
				State = 276;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 277; _localctx.fields = fieldSelect();
			State = 281;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 278; ws();
					}
					} 
				}
				State = 283;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataQueryContext : ParserRuleContext {
		public EntityQueryContext[] entityQuery() {
			return GetRuleContexts<EntityQueryContext>();
		}
		public EntityQueryContext entityQuery(int i) {
			return GetRuleContext<EntityQueryContext>(i);
		}
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public DataQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataQueryContext dataQuery() {
		DataQueryContext _localctx = new DataQueryContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_dataQuery);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 284; ws();
				}
				}
				State = 289;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 290; Match(T__27);
			State = 294;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 291; ws();
				}
				}
				State = 296;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 297; entityQuery();
			State = 314;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,43,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 301;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
						{
						{
						State = 298; ws();
						}
						}
						State = 303;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 304; Match(T__7);
					State = 308;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
						{
						{
						State = 305; ws();
						}
						}
						State = 310;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 311; entityQuery();
					}
					} 
				}
				State = 316;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,43,_ctx);
			}
			State = 320;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 317; ws();
				}
				}
				State = 322;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 323; Match(T__28);
			State = 327;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 324; ws();
				}
				}
				State = 329;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\"\x14D\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x3\x2\x3\x2\x3\x3\x3\x3\x5\x3)\n\x3\x3"+
		"\x3\x3\x3\x3\x3\x5\x3.\n\x3\a\x3\x30\n\x3\f\x3\xE\x3\x33\v\x3\x3\x4\x5"+
		"\x4\x36\n\x4\x3\x4\x6\x4\x39\n\x4\r\x4\xE\x4:\x3\x5\x5\x5>\n\x5\x3\x5"+
		"\x6\x5\x41\n\x5\r\x5\xE\x5\x42\x3\x5\x3\x5\x6\x5G\n\x5\r\x5\xE\x5H\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\a\x6O\n\x6\f\x6\xE\x6R\v\x6\x3\x6\x3\x6\x3\a\x3"+
		"\a\x3\a\x5\aY\n\a\x3\b\x3\b\x3\b\x5\b^\n\b\x3\b\x3\b\x3\t\x3\t\x3\t\a"+
		"\t\x65\n\t\f\t\xE\th\v\t\x3\n\x3\n\x3\v\x3\v\x3\v\a\vo\n\v\f\v\xE\vr\v"+
		"\v\x3\v\x3\v\a\vv\n\v\f\v\xE\vy\v\v\x3\v\x3\v\a\v}\n\v\f\v\xE\v\x80\v"+
		"\v\x3\v\x3\v\a\v\x84\n\v\f\v\xE\v\x87\v\v\x3\v\x3\v\a\v\x8B\n\v\f\v\xE"+
		"\v\x8E\v\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x98\n\v\x3\v\x3"+
		"\v\a\v\x9C\n\v\f\v\xE\v\x9F\v\v\x3\v\x3\v\a\v\xA3\n\v\f\v\xE\v\xA6\v\v"+
		"\x3\v\x3\v\a\v\xAA\n\v\f\v\xE\v\xAD\v\v\x3\v\x3\v\a\v\xB1\n\v\f\v\xE\v"+
		"\xB4\v\v\x3\v\x3\v\x3\v\x3\v\a\v\xBA\n\v\f\v\xE\v\xBD\v\v\x3\v\x3\v\a"+
		"\v\xC1\n\v\f\v\xE\v\xC4\v\v\x3\v\x3\v\a\v\xC8\n\v\f\v\xE\v\xCB\v\v\x3"+
		"\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\a\xF\xD5\n\xF\f\xF\xE\xF\xD8"+
		"\v\xF\x3\xF\x3\xF\a\xF\xDC\n\xF\f\xF\xE\xF\xDF\v\xF\x3\xF\x3\xF\x3\x10"+
		"\x3\x10\a\x10\xE5\n\x10\f\x10\xE\x10\xE8\v\x10\x3\x10\x3\x10\x3\x10\x5"+
		"\x10\xED\n\x10\x3\x10\a\x10\xF0\n\x10\f\x10\xE\x10\xF3\v\x10\x3\x10\x3"+
		"\x10\a\x10\xF7\n\x10\f\x10\xE\x10\xFA\v\x10\x3\x10\x3\x10\x3\x10\x5\x10"+
		"\xFF\n\x10\a\x10\x101\n\x10\f\x10\xE\x10\x104\v\x10\x3\x10\a\x10\x107"+
		"\n\x10\f\x10\xE\x10\x10A\v\x10\x3\x10\x3\x10\x3\x11\x3\x11\x5\x11\x110"+
		"\n\x11\x3\x11\a\x11\x113\n\x11\f\x11\xE\x11\x116\v\x11\x3\x11\x3\x11\a"+
		"\x11\x11A\n\x11\f\x11\xE\x11\x11D\v\x11\x3\x12\a\x12\x120\n\x12\f\x12"+
		"\xE\x12\x123\v\x12\x3\x12\x3\x12\a\x12\x127\n\x12\f\x12\xE\x12\x12A\v"+
		"\x12\x3\x12\x3\x12\a\x12\x12E\n\x12\f\x12\xE\x12\x131\v\x12\x3\x12\x3"+
		"\x12\a\x12\x135\n\x12\f\x12\xE\x12\x138\v\x12\x3\x12\a\x12\x13B\n\x12"+
		"\f\x12\xE\x12\x13E\v\x12\x3\x12\a\x12\x141\n\x12\f\x12\xE\x12\x144\v\x12"+
		"\x3\x12\x3\x12\a\x12\x148\n\x12\f\x12\xE\x12\x14B\v\x12\x3\x12\x3P\x2"+
		"\x3\x14\x13\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2"+
		"\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2\x2\x5\x3\x2\x6\a\x4\x2\x4"+
		"\x4\v\x16\x5\x2\x6\a\x18\x18\x1D\x1D\x16F\x2$\x3\x2\x2\x2\x4(\x3\x2\x2"+
		"\x2\x6\x35\x3\x2\x2\x2\b=\x3\x2\x2\x2\nJ\x3\x2\x2\x2\fX\x3\x2\x2\x2\xE"+
		"Z\x3\x2\x2\x2\x10\x61\x3\x2\x2\x2\x12i\x3\x2\x2\x2\x14\x97\x3\x2\x2\x2"+
		"\x16\xCC\x3\x2\x2\x2\x18\xCE\x3\x2\x2\x2\x1A\xD0\x3\x2\x2\x2\x1C\xD2\x3"+
		"\x2\x2\x2\x1E\xE2\x3\x2\x2\x2 \x10F\x3\x2\x2\x2\"\x121\x3\x2\x2\x2$%\a"+
		" \x2\x2%\x3\x3\x2\x2\x2&)\x5\x2\x2\x2\')\x5\xE\b\x2(&\x3\x2\x2\x2(\'\x3"+
		"\x2\x2\x2)\x31\x3\x2\x2\x2*-\a\x3\x2\x2+.\x5\x2\x2\x2,.\x5\xE\b\x2-+\x3"+
		"\x2\x2\x2-,\x3\x2\x2\x2.\x30\x3\x2\x2\x2/*\x3\x2\x2\x2\x30\x33\x3\x2\x2"+
		"\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x5\x3\x2\x2\x2\x33\x31\x3"+
		"\x2\x2\x2\x34\x36\a\x4\x2\x2\x35\x34\x3\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36"+
		"\x38\x3\x2\x2\x2\x37\x39\a!\x2\x2\x38\x37\x3\x2\x2\x2\x39:\x3\x2\x2\x2"+
		":\x38\x3\x2\x2\x2:;\x3\x2\x2\x2;\a\x3\x2\x2\x2<>\a\x4\x2\x2=<\x3\x2\x2"+
		"\x2=>\x3\x2\x2\x2>@\x3\x2\x2\x2?\x41\a!\x2\x2@?\x3\x2\x2\x2\x41\x42\x3"+
		"\x2\x2\x2\x42@\x3\x2\x2\x2\x42\x43\x3\x2\x2\x2\x43\x44\x3\x2\x2\x2\x44"+
		"\x46\a\x3\x2\x2\x45G\a!\x2\x2\x46\x45\x3\x2\x2\x2GH\x3\x2\x2\x2H\x46\x3"+
		"\x2\x2\x2HI\x3\x2\x2\x2I\t\x3\x2\x2\x2JP\a\x5\x2\x2KO\a\x5\x2\x2LO\n\x2"+
		"\x2\x2MO\a\"\x2\x2NK\x3\x2\x2\x2NL\x3\x2\x2\x2NM\x3\x2\x2\x2OR\x3\x2\x2"+
		"\x2PQ\x3\x2\x2\x2PN\x3\x2\x2\x2QS\x3\x2\x2\x2RP\x3\x2\x2\x2ST\a\x5\x2"+
		"\x2T\v\x3\x2\x2\x2UY\x5\n\x6\x2VY\x5\x6\x4\x2WY\x5\b\x5\x2XU\x3\x2\x2"+
		"\x2XV\x3\x2\x2\x2XW\x3\x2\x2\x2Y\r\x3\x2\x2\x2Z[\x5\x2\x2\x2[]\a\b\x2"+
		"\x2\\^\x5\x10\t\x2]\\\x3\x2\x2\x2]^\x3\x2\x2\x2^_\x3\x2\x2\x2_`\a\t\x2"+
		"\x2`\xF\x3\x2\x2\x2\x61\x66\x5\x14\v\x2\x62\x63\a\n\x2\x2\x63\x65\x5\x14"+
		"\v\x2\x64\x62\x3\x2\x2\x2\x65h\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2\x66g\x3"+
		"\x2\x2\x2g\x11\x3\x2\x2\x2h\x66\x3\x2\x2\x2ij\t\x3\x2\x2j\x13\x3\x2\x2"+
		"\x2kl\b\v\x1\x2lp\a\x17\x2\x2mo\a\x18\x2\x2nm\x3\x2\x2\x2or\x3\x2\x2\x2"+
		"pn\x3\x2\x2\x2pq\x3\x2\x2\x2qs\x3\x2\x2\x2rp\x3\x2\x2\x2sw\x5\x14\v\x2"+
		"tv\a\x18\x2\x2ut\x3\x2\x2\x2vy\x3\x2\x2\x2wu\x3\x2\x2\x2wx\x3\x2\x2\x2"+
		"xz\x3\x2\x2\x2yw\x3\x2\x2\x2z~\a\x19\x2\x2{}\a\x18\x2\x2|{\x3\x2\x2\x2"+
		"}\x80\x3\x2\x2\x2~|\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F\x81\x3\x2\x2\x2\x80"+
		"~\x3\x2\x2\x2\x81\x85\x5\x14\v\x2\x82\x84\a\x18\x2\x2\x83\x82\x3\x2\x2"+
		"\x2\x84\x87\x3\x2\x2\x2\x85\x83\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x88"+
		"\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x88\x8C\a\x1A\x2\x2\x89\x8B\a\x18\x2"+
		"\x2\x8A\x89\x3\x2\x2\x2\x8B\x8E\x3\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8C\x8D"+
		"\x3\x2\x2\x2\x8D\x8F\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\x8F\x90\x5\x14\v"+
		"\b\x90\x98\x3\x2\x2\x2\x91\x92\a\b\x2\x2\x92\x93\x5\x14\v\x2\x93\x94\a"+
		"\t\x2\x2\x94\x98\x3\x2\x2\x2\x95\x98\x5\x4\x3\x2\x96\x98\x5\f\a\x2\x97"+
		"k\x3\x2\x2\x2\x97\x91\x3\x2\x2\x2\x97\x95\x3\x2\x2\x2\x97\x96\x3\x2\x2"+
		"\x2\x98\xC9\x3\x2\x2\x2\x99\x9D\f\a\x2\x2\x9A\x9C\a\x18\x2\x2\x9B\x9A"+
		"\x3\x2\x2\x2\x9C\x9F\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9D\x9E\x3\x2\x2"+
		"\x2\x9E\xA0\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2\xA0\xA4\a\x1B\x2\x2\xA1\xA3"+
		"\a\x18\x2\x2\xA2\xA1\x3\x2\x2\x2\xA3\xA6\x3\x2\x2\x2\xA4\xA2\x3\x2\x2"+
		"\x2\xA4\xA5\x3\x2\x2\x2\xA5\xA7\x3\x2\x2\x2\xA6\xA4\x3\x2\x2\x2\xA7\xAB"+
		"\x5\x14\v\x2\xA8\xAA\a\x18\x2\x2\xA9\xA8\x3\x2\x2\x2\xAA\xAD\x3\x2\x2"+
		"\x2\xAB\xA9\x3\x2\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC\xAE\x3\x2\x2\x2\xAD\xAB"+
		"\x3\x2\x2\x2\xAE\xB2\a\x1C\x2\x2\xAF\xB1\a\x18\x2\x2\xB0\xAF\x3\x2\x2"+
		"\x2\xB1\xB4\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\xB5"+
		"\x3\x2\x2\x2\xB4\xB2\x3\x2\x2\x2\xB5\xB6\x5\x14\v\b\xB6\xC8\x3\x2\x2\x2"+
		"\xB7\xBB\f\x6\x2\x2\xB8\xBA\a\x18\x2\x2\xB9\xB8\x3\x2\x2\x2\xBA\xBD\x3"+
		"\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC\xBE\x3\x2\x2\x2"+
		"\xBD\xBB\x3\x2\x2\x2\xBE\xC2\x5\x12\n\x2\xBF\xC1\a\x18\x2\x2\xC0\xBF\x3"+
		"\x2\x2\x2\xC1\xC4\x3\x2\x2\x2\xC2\xC0\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2"+
		"\xC3\xC5\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC5\xC6\x5\x14\v\a\xC6\xC8\x3"+
		"\x2\x2\x2\xC7\x99\x3\x2\x2\x2\xC7\xB7\x3\x2\x2\x2\xC8\xCB\x3\x2\x2\x2"+
		"\xC9\xC7\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA\x15\x3\x2\x2\x2\xCB\xC9\x3"+
		"\x2\x2\x2\xCC\xCD\x5\x14\v\x2\xCD\x17\x3\x2\x2\x2\xCE\xCF\t\x4\x2\x2\xCF"+
		"\x19\x3\x2\x2\x2\xD0\xD1\x5\x4\x3\x2\xD1\x1B\x3\x2\x2\x2\xD2\xD6\x5\x2"+
		"\x2\x2\xD3\xD5\x5\x18\r\x2\xD4\xD3\x3\x2\x2\x2\xD5\xD8\x3\x2\x2\x2\xD6"+
		"\xD4\x3\x2\x2\x2\xD6\xD7\x3\x2\x2\x2\xD7\xD9\x3\x2\x2\x2\xD8\xD6\x3\x2"+
		"\x2\x2\xD9\xDD\a\x1C\x2\x2\xDA\xDC\x5\x18\r\x2\xDB\xDA\x3\x2\x2\x2\xDC"+
		"\xDF\x3\x2\x2\x2\xDD\xDB\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE\xE0\x3\x2"+
		"\x2\x2\xDF\xDD\x3\x2\x2\x2\xE0\xE1\x5\x14\v\x2\xE1\x1D\x3\x2\x2\x2\xE2"+
		"\xE6\a\x1E\x2\x2\xE3\xE5\x5\x18\r\x2\xE4\xE3\x3\x2\x2\x2\xE5\xE8\x3\x2"+
		"\x2\x2\xE6\xE4\x3\x2\x2\x2\xE6\xE7\x3\x2\x2\x2\xE7\xEC\x3\x2\x2\x2\xE8"+
		"\xE6\x3\x2\x2\x2\xE9\xED\x5\x1C\xF\x2\xEA\xED\x5\x1A\xE\x2\xEB\xED\x5"+
		" \x11\x2\xEC\xE9\x3\x2\x2\x2\xEC\xEA\x3\x2\x2\x2\xEC\xEB\x3\x2\x2\x2\xED"+
		"\x102\x3\x2\x2\x2\xEE\xF0\x5\x18\r\x2\xEF\xEE\x3\x2\x2\x2\xF0\xF3\x3\x2"+
		"\x2\x2\xF1\xEF\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2\xF4\x3\x2\x2\x2\xF3"+
		"\xF1\x3\x2\x2\x2\xF4\xF8\a\n\x2\x2\xF5\xF7\x5\x18\r\x2\xF6\xF5\x3\x2\x2"+
		"\x2\xF7\xFA\x3\x2\x2\x2\xF8\xF6\x3\x2\x2\x2\xF8\xF9\x3\x2\x2\x2\xF9\xFE"+
		"\x3\x2\x2\x2\xFA\xF8\x3\x2\x2\x2\xFB\xFF\x5\x1C\xF\x2\xFC\xFF\x5\x1A\xE"+
		"\x2\xFD\xFF\x5 \x11\x2\xFE\xFB\x3\x2\x2\x2\xFE\xFC\x3\x2\x2\x2\xFE\xFD"+
		"\x3\x2\x2\x2\xFF\x101\x3\x2\x2\x2\x100\xF1\x3\x2\x2\x2\x101\x104\x3\x2"+
		"\x2\x2\x102\x100\x3\x2\x2\x2\x102\x103\x3\x2\x2\x2\x103\x108\x3\x2\x2"+
		"\x2\x104\x102\x3\x2\x2\x2\x105\x107\x5\x18\r\x2\x106\x105\x3\x2\x2\x2"+
		"\x107\x10A\x3\x2\x2\x2\x108\x106\x3\x2\x2\x2\x108\x109\x3\x2\x2\x2\x109"+
		"\x10B\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10B\x10C\a\x1F\x2\x2\x10C\x1F"+
		"\x3\x2\x2\x2\x10D\x110\x5\x1C\xF\x2\x10E\x110\x5\x4\x3\x2\x10F\x10D\x3"+
		"\x2\x2\x2\x10F\x10E\x3\x2\x2\x2\x110\x114\x3\x2\x2\x2\x111\x113\x5\x18"+
		"\r\x2\x112\x111\x3\x2\x2\x2\x113\x116\x3\x2\x2\x2\x114\x112\x3\x2\x2\x2"+
		"\x114\x115\x3\x2\x2\x2\x115\x117\x3\x2\x2\x2\x116\x114\x3\x2\x2\x2\x117"+
		"\x11B\x5\x1E\x10\x2\x118\x11A\x5\x18\r\x2\x119\x118\x3\x2\x2\x2\x11A\x11D"+
		"\x3\x2\x2\x2\x11B\x119\x3\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C!\x3\x2\x2"+
		"\x2\x11D\x11B\x3\x2\x2\x2\x11E\x120\x5\x18\r\x2\x11F\x11E\x3\x2\x2\x2"+
		"\x120\x123\x3\x2\x2\x2\x121\x11F\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2\x122"+
		"\x124\x3\x2\x2\x2\x123\x121\x3\x2\x2\x2\x124\x128\a\x1E\x2\x2\x125\x127"+
		"\x5\x18\r\x2\x126\x125\x3\x2\x2\x2\x127\x12A\x3\x2\x2\x2\x128\x126\x3"+
		"\x2\x2\x2\x128\x129\x3\x2\x2\x2\x129\x12B\x3\x2\x2\x2\x12A\x128\x3\x2"+
		"\x2\x2\x12B\x13C\x5 \x11\x2\x12C\x12E\x5\x18\r\x2\x12D\x12C\x3\x2\x2\x2"+
		"\x12E\x131\x3\x2\x2\x2\x12F\x12D\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130"+
		"\x132\x3\x2\x2\x2\x131\x12F\x3\x2\x2\x2\x132\x136\a\n\x2\x2\x133\x135"+
		"\x5\x18\r\x2\x134\x133\x3\x2\x2\x2\x135\x138\x3\x2\x2\x2\x136\x134\x3"+
		"\x2\x2\x2\x136\x137\x3\x2\x2\x2\x137\x139\x3\x2\x2\x2\x138\x136\x3\x2"+
		"\x2\x2\x139\x13B\x5 \x11\x2\x13A\x12F\x3\x2\x2\x2\x13B\x13E\x3\x2\x2\x2"+
		"\x13C\x13A\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x142\x3\x2\x2\x2\x13E"+
		"\x13C\x3\x2\x2\x2\x13F\x141\x5\x18\r\x2\x140\x13F\x3\x2\x2\x2\x141\x144"+
		"\x3\x2\x2\x2\x142\x140\x3\x2\x2\x2\x142\x143\x3\x2\x2\x2\x143\x145\x3"+
		"\x2\x2\x2\x144\x142\x3\x2\x2\x2\x145\x149\a\x1F\x2\x2\x146\x148\x5\x18"+
		"\r\x2\x147\x146\x3\x2\x2\x2\x148\x14B\x3\x2\x2\x2\x149\x147\x3\x2\x2\x2"+
		"\x149\x14A\x3\x2\x2\x2\x14A#\x3\x2\x2\x2\x14B\x149\x3\x2\x2\x2\x30(-\x31"+
		"\x35:=\x42HNPX]\x66pw~\x85\x8C\x97\x9D\xA4\xAB\xB2\xBB\xC2\xC7\xC9\xD6"+
		"\xDD\xE6\xEC\xF1\xF8\xFE\x102\x108\x10F\x114\x11B\x121\x128\x12F\x136"+
		"\x13C\x142\x149";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace EntityQueryLanguage.Grammer
