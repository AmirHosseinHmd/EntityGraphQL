//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5-rc002
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/lukemurray/Projects/github/EntityQueryLanguage/src/EntityQueryLanguage/Grammer/EqlGrammer.g4 by ANTLR 4.6.5-rc002

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace EntityQueryLanguage.Grammer {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5-rc002")]
public partial class EqlGrammerParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9,
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17,
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24,
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, ID=31, DIGIT=32,
		STRING_CHARS=33;
	public const int
		RULE_identity = 0, RULE_callPath = 1, RULE_int = 2, RULE_decimal = 3,
		RULE_string = 4, RULE_constant = 5, RULE_call = 6, RULE_args = 7, RULE_operator = 8,
		RULE_expression = 9, RULE_startRule = 10, RULE_ws = 11, RULE_queryKeyword = 12,
		RULE_field = 13, RULE_aliasType = 14, RULE_aliasExp = 15, RULE_fieldSelect = 16,
		RULE_entityQuery = 17, RULE_dataQuery = 18;
	public static readonly string[] ruleNames = {
		"identity", "callPath", "int", "decimal", "string", "constant", "call",
		"args", "operator", "expression", "startRule", "ws", "queryKeyword", "field",
		"aliasType", "aliasExp", "fieldSelect", "entityQuery", "dataQuery"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'-'", "'''", "'\n'", "'\r'", "'('", "')'", "','", "'+'",
		"'%'", "'^'", "'and'", "'*'", "'or'", "'='", "'<='", "'>='", "'<'", "'>'",
		"'/'", "'if'", "' '", "'then'", "'else'", "'?'", "':'", "'\t'", "'query'",
		"'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, "ID", "DIGIT", "STRING_CHARS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EqlGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public EqlGrammerParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class IdentityContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(EqlGrammerParser.ID, 0); }
		public IdentityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identity; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentityContext identity() {
		IdentityContext _localctx = new IdentityContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_identity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallPathContext : ParserRuleContext {
		public IdentityContext[] identity() {
			return GetRuleContexts<IdentityContext>();
		}
		public IdentityContext identity(int i) {
			return GetRuleContext<IdentityContext>(i);
		}
		public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public CallPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callPath; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallPathContext callPath() {
		CallPathContext _localctx = new CallPathContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_callPath);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 40; identity();
				}
				break;

			case 2:
				{
				State = 41; call();
				}
				break;
			}
			State = 51;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 44; Match(T__0);
					State = 47;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
					case 1:
						{
						State = 45; identity();
						}
						break;

					case 2:
						{
						State = 46; call();
						}
						break;
					}
					}
					}
				}
				State = 53;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(EqlGrammerParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(EqlGrammerParser.DIGIT, i);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_int);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 54; Match(T__1);
				}
			}

			State = 58;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 57; Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 60;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(EqlGrammerParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(EqlGrammerParser.DIGIT, i);
		}
		public DecimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalContext @decimal() {
		DecimalContext _localctx = new DecimalContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_decimal);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 62; Match(T__1);
				}
			}

			State = 66;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 65; Match(DIGIT);
				}
				}
				State = 68;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==DIGIT );
			State = 70; Match(T__0);
			State = 72;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 71; Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 74;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode[] STRING_CHARS() { return GetTokens(EqlGrammerParser.STRING_CHARS); }
		public ITerminalNode STRING_CHARS(int i) {
			return GetToken(EqlGrammerParser.STRING_CHARS, i);
		}
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_string);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(T__2);
			State = 82;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					State = 80;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
					case 1:
						{
						State = 77; Match(T__2);
						}
						break;

					case 2:
						{
						State = 78;
						_la = _input.La(1);
						if ( _la <= 0 || (_la==T__3 || _la==T__4) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 3:
						{
						State = 79; Match(STRING_CHARS);
						}
						break;
					}
					}
				}
				State = 84;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			State = 85; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecimalContext @decimal() {
			return GetRuleContext<DecimalContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_constant);
		try {
			State = 90;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87; @string();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88; @int();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 89; @decimal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public IdentityContext method;
		public ArgsContext arguments;
		public IdentityContext identity() {
			return GetRuleContext<IdentityContext>(0);
		}
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; _localctx.method = identity();
			State = 93; Match(T__5);
			State = 95;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__5) | (1L << T__20) | (1L << ID) | (1L << DIGIT))) != 0)) {
				{
				State = 94; _localctx.arguments = args();
				}
			}

			State = 97; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; expression(0);
			State = 104;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__7) {
				{
				{
				State = 100; Match(T__7);
				State = 101; expression(0);
				}
				}
				State = 106;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }

		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfThenElseContext : ExpressionContext {
		public ExpressionContext test;
		public ExpressionContext ifTrue;
		public ExpressionContext ifFalse;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfThenElseContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfThenElseInlineContext : ExpressionContext {
		public ExpressionContext test;
		public ExpressionContext ifTrue;
		public ExpressionContext ifFalse;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfThenElseInlineContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElseInline(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryContext : ExpressionContext {
		public ExpressionContext left;
		public OperatorContext op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public BinaryContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprContext : ExpressionContext {
		public ExpressionContext body;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallOrIdContext : ExpressionContext {
		public CallPathContext callPath() {
			return GetRuleContext<CallPathContext>(0);
		}
		public CallOrIdContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallOrId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__20:
				{
				_localctx = new IfThenElseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 110; Match(T__20);
				State = 114;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__21) {
					{
					{
					State = 111; Match(T__21);
					}
					}
					State = 116;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 117; ((IfThenElseContext)_localctx).test = expression(0);
				State = 121;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__21) {
					{
					{
					State = 118; Match(T__21);
					}
					}
					State = 123;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 124; Match(T__22);
				State = 128;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__21) {
					{
					{
					State = 125; Match(T__21);
					}
					}
					State = 130;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 131; ((IfThenElseContext)_localctx).ifTrue = expression(0);
				State = 135;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__21) {
					{
					{
					State = 132; Match(T__21);
					}
					}
					State = 137;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 138; Match(T__23);
				State = 142;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__21) {
					{
					{
					State = 139; Match(T__21);
					}
					}
					State = 144;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 145; ((IfThenElseContext)_localctx).ifFalse = expression(6);
				}
				break;
			case T__5:
				{
				_localctx = new ExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 147; Match(T__5);
				State = 148; ((ExprContext)_localctx).body = expression(0);
				State = 149; Match(T__6);
				}
				break;
			case ID:
				{
				_localctx = new CallOrIdContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 151; callPath();
				}
				break;
			case T__1:
			case T__2:
			case DIGIT:
				{
				_localctx = new ConstContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 152; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 203;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 201;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
					case 1:
						{
						_localctx = new IfThenElseInlineContext(new ExpressionContext(_parentctx, _parentState));
						((IfThenElseInlineContext)_localctx).test = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 155;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 159;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 156; Match(T__21);
							}
							}
							State = 161;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 162; Match(T__24);
						State = 166;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 163; Match(T__21);
							}
							}
							State = 168;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 169; ((IfThenElseInlineContext)_localctx).ifTrue = expression(0);
						State = 173;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 170; Match(T__21);
							}
							}
							State = 175;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 176; Match(T__25);
						State = 180;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 177; Match(T__21);
							}
							}
							State = 182;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 183; ((IfThenElseInlineContext)_localctx).ifFalse = expression(6);
						}
						break;

					case 2:
						{
						_localctx = new BinaryContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 185;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 189;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 186; Match(T__21);
							}
							}
							State = 191;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 192; ((BinaryContext)_localctx).op = @operator();
						State = 196;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 193; Match(T__21);
							}
							}
							State = 198;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 199; ((BinaryContext)_localctx).right = expression(5);
						}
						break;
					}
					}
				}
				State = 205;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StartRuleContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WsContext : ParserRuleContext {
		public WsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ws; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WsContext ws() {
		WsContext _localctx = new WsContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_ws);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryKeywordContext : ParserRuleContext {
		public QueryKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryKeyword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryKeywordContext queryKeyword() {
		QueryKeywordContext _localctx = new QueryKeywordContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_queryKeyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; Match(T__27);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public CallPathContext callPath() {
			return GetRuleContext<CallPathContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; callPath();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasTypeContext : ParserRuleContext {
		public IdentityContext name;
		public IdentityContext identity() {
			return GetRuleContext<IdentityContext>(0);
		}
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public AliasTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasTypeContext aliasType() {
		AliasTypeContext _localctx = new AliasTypeContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_aliasType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; _localctx.name = identity();
			State = 218;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 215; ws();
				}
				}
				State = 220;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 221; Match(T__25);
			State = 225;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 222; ws();
				}
				}
				State = 227;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasExpContext : ParserRuleContext {
		public AliasTypeContext alias;
		public ExpressionContext entity;
		public AliasTypeContext aliasType() {
			return GetRuleContext<AliasTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AliasExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasExp; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasExpContext aliasExp() {
		AliasExpContext _localctx = new AliasExpContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_aliasExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; _localctx.alias = aliasType();
			State = 229; _localctx.entity = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldSelectContext : ParserRuleContext {
		public AliasExpContext[] aliasExp() {
			return GetRuleContexts<AliasExpContext>();
		}
		public AliasExpContext aliasExp(int i) {
			return GetRuleContext<AliasExpContext>(i);
		}
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public EntityQueryContext[] entityQuery() {
			return GetRuleContexts<EntityQueryContext>();
		}
		public EntityQueryContext entityQuery(int i) {
			return GetRuleContext<EntityQueryContext>(i);
		}
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public FieldSelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldSelect; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldSelectContext fieldSelect() {
		FieldSelectContext _localctx = new FieldSelectContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_fieldSelect);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; Match(T__28);
			State = 235;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 232; ws();
				}
				}
				State = 237;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 241;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				State = 238; aliasExp();
				}
				break;

			case 2:
				{
				State = 239; field();
				}
				break;

			case 3:
				{
				State = 240; entityQuery();
				}
				break;
			}
			State = 263;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 246;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
						{
						{
						State = 243; ws();
						}
						}
						State = 248;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 249; Match(T__7);
					State = 253;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
						{
						{
						State = 250; ws();
						}
						}
						State = 255;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 259;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
					case 1:
						{
						State = 256; aliasExp();
						}
						break;

					case 2:
						{
						State = 257; field();
						}
						break;

					case 3:
						{
						State = 258; entityQuery();
						}
						break;
					}
					}
					}
				}
				State = 265;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			State = 269;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 266; ws();
				}
				}
				State = 271;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 272; Match(T__29);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityQueryContext : ParserRuleContext {
		public AliasTypeContext alias;
		public CallPathContext entity;
		public FieldSelectContext fields;
		public CallPathContext callPath() {
			return GetRuleContext<CallPathContext>(0);
		}
		public FieldSelectContext fieldSelect() {
			return GetRuleContext<FieldSelectContext>(0);
		}
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public AliasTypeContext aliasType() {
			return GetRuleContext<AliasTypeContext>(0);
		}
		public EntityQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityQueryContext entityQuery() {
		EntityQueryContext _localctx = new EntityQueryContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_entityQuery);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				State = 274; _localctx.alias = aliasType();
				}
				break;
			}
			State = 277; _localctx.entity = callPath();
			State = 281;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 278; ws();
				}
				}
				State = 283;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 284; _localctx.fields = fieldSelect();
			State = 288;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 285; ws();
					}
					}
				}
				State = 290;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,38,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataQueryContext : ParserRuleContext {
		public AliasExpContext[] aliasExp() {
			return GetRuleContexts<AliasExpContext>();
		}
		public AliasExpContext aliasExp(int i) {
			return GetRuleContext<AliasExpContext>(i);
		}
		public EntityQueryContext[] entityQuery() {
			return GetRuleContexts<EntityQueryContext>();
		}
		public EntityQueryContext entityQuery(int i) {
			return GetRuleContext<EntityQueryContext>(i);
		}
		public QueryKeywordContext queryKeyword() {
			return GetRuleContext<QueryKeywordContext>(0);
		}
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public DataQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataQueryContext dataQuery() {
		DataQueryContext _localctx = new DataQueryContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_dataQuery);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__27) {
				{
				State = 291; queryKeyword();
				}
			}

			State = 297;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 294; ws();
				}
				}
				State = 299;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 300; Match(T__28);
			State = 304;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 301; ws();
				}
				}
				State = 306;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 309;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 307; aliasExp();
				}
				break;

			case 2:
				{
				State = 308; entityQuery();
				}
				break;
			}
			State = 330;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,46,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 314;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
						{
						{
						State = 311; ws();
						}
						}
						State = 316;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 317; Match(T__7);
					State = 321;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
						{
						{
						State = 318; ws();
						}
						}
						State = 323;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 326;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,45,_ctx) ) {
					case 1:
						{
						State = 324; aliasExp();
						}
						break;

					case 2:
						{
						State = 325; entityQuery();
						}
						break;
					}
					}
					}
				}
				State = 332;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,46,_ctx);
			}
			State = 336;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 333; ws();
				}
				}
				State = 338;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 339; Match(T__29);
			State = 343;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 340; ws();
				}
				}
				State = 345;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3#\x15D\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\x3\x2\x3"+
		"\x3\x3\x3\x5\x3-\n\x3\x3\x3\x3\x3\x3\x3\x5\x3\x32\n\x3\a\x3\x34\n\x3\f"+
		"\x3\xE\x3\x37\v\x3\x3\x4\x5\x4:\n\x4\x3\x4\x6\x4=\n\x4\r\x4\xE\x4>\x3"+
		"\x5\x5\x5\x42\n\x5\x3\x5\x6\x5\x45\n\x5\r\x5\xE\x5\x46\x3\x5\x3\x5\x6"+
		"\x5K\n\x5\r\x5\xE\x5L\x3\x6\x3\x6\x3\x6\x3\x6\a\x6S\n\x6\f\x6\xE\x6V\v"+
		"\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x5\a]\n\a\x3\b\x3\b\x3\b\x5\b\x62\n\b\x3"+
		"\b\x3\b\x3\t\x3\t\x3\t\a\ti\n\t\f\t\xE\tl\v\t\x3\n\x3\n\x3\v\x3\v\x3\v"+
		"\a\vs\n\v\f\v\xE\vv\v\v\x3\v\x3\v\a\vz\n\v\f\v\xE\v}\v\v\x3\v\x3\v\a\v"+
		"\x81\n\v\f\v\xE\v\x84\v\v\x3\v\x3\v\a\v\x88\n\v\f\v\xE\v\x8B\v\v\x3\v"+
		"\x3\v\a\v\x8F\n\v\f\v\xE\v\x92\v\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x5\v\x9C\n\v\x3\v\x3\v\a\v\xA0\n\v\f\v\xE\v\xA3\v\v\x3\v\x3\v\a"+
		"\v\xA7\n\v\f\v\xE\v\xAA\v\v\x3\v\x3\v\a\v\xAE\n\v\f\v\xE\v\xB1\v\v\x3"+
		"\v\x3\v\a\v\xB5\n\v\f\v\xE\v\xB8\v\v\x3\v\x3\v\x3\v\x3\v\a\v\xBE\n\v\f"+
		"\v\xE\v\xC1\v\v\x3\v\x3\v\a\v\xC5\n\v\f\v\xE\v\xC8\v\v\x3\v\x3\v\a\v\xCC"+
		"\n\v\f\v\xE\v\xCF\v\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10"+
		"\x3\x10\a\x10\xDB\n\x10\f\x10\xE\x10\xDE\v\x10\x3\x10\x3\x10\a\x10\xE2"+
		"\n\x10\f\x10\xE\x10\xE5\v\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\a\x12"+
		"\xEC\n\x12\f\x12\xE\x12\xEF\v\x12\x3\x12\x3\x12\x3\x12\x5\x12\xF4\n\x12"+
		"\x3\x12\a\x12\xF7\n\x12\f\x12\xE\x12\xFA\v\x12\x3\x12\x3\x12\a\x12\xFE"+
		"\n\x12\f\x12\xE\x12\x101\v\x12\x3\x12\x3\x12\x3\x12\x5\x12\x106\n\x12"+
		"\a\x12\x108\n\x12\f\x12\xE\x12\x10B\v\x12\x3\x12\a\x12\x10E\n\x12\f\x12"+
		"\xE\x12\x111\v\x12\x3\x12\x3\x12\x3\x13\x5\x13\x116\n\x13\x3\x13\x3\x13"+
		"\a\x13\x11A\n\x13\f\x13\xE\x13\x11D\v\x13\x3\x13\x3\x13\a\x13\x121\n\x13"+
		"\f\x13\xE\x13\x124\v\x13\x3\x14\x5\x14\x127\n\x14\x3\x14\a\x14\x12A\n"+
		"\x14\f\x14\xE\x14\x12D\v\x14\x3\x14\x3\x14\a\x14\x131\n\x14\f\x14\xE\x14"+
		"\x134\v\x14\x3\x14\x3\x14\x5\x14\x138\n\x14\x3\x14\a\x14\x13B\n\x14\f"+
		"\x14\xE\x14\x13E\v\x14\x3\x14\x3\x14\a\x14\x142\n\x14\f\x14\xE\x14\x145"+
		"\v\x14\x3\x14\x3\x14\x5\x14\x149\n\x14\a\x14\x14B\n\x14\f\x14\xE\x14\x14E"+
		"\v\x14\x3\x14\a\x14\x151\n\x14\f\x14\xE\x14\x154\v\x14\x3\x14\x3\x14\a"+
		"\x14\x158\n\x14\f\x14\xE\x14\x15B\v\x14\x3\x14\x3T\x2\x3\x14\x15\x2\x2"+
		"\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2\x2\x5\x3\x2\x6\a\x4\x2\x4\x4\v\x16"+
		"\x5\x2\x6\a\x18\x18\x1D\x1D\x180\x2(\x3\x2\x2\x2\x4,\x3\x2\x2\x2\x6\x39"+
		"\x3\x2\x2\x2\b\x41\x3\x2\x2\x2\nN\x3\x2\x2\x2\f\\\x3\x2\x2\x2\xE^\x3\x2"+
		"\x2\x2\x10\x65\x3\x2\x2\x2\x12m\x3\x2\x2\x2\x14\x9B\x3\x2\x2\x2\x16\xD0"+
		"\x3\x2\x2\x2\x18\xD2\x3\x2\x2\x2\x1A\xD4\x3\x2\x2\x2\x1C\xD6\x3\x2\x2"+
		"\x2\x1E\xD8\x3\x2\x2\x2 \xE6\x3\x2\x2\x2\"\xE9\x3\x2\x2\x2$\x115\x3\x2"+
		"\x2\x2&\x126\x3\x2\x2\x2()\a!\x2\x2)\x3\x3\x2\x2\x2*-\x5\x2\x2\x2+-\x5"+
		"\xE\b\x2,*\x3\x2\x2\x2,+\x3\x2\x2\x2-\x35\x3\x2\x2\x2.\x31\a\x3\x2\x2"+
		"/\x32\x5\x2\x2\x2\x30\x32\x5\xE\b\x2\x31/\x3\x2\x2\x2\x31\x30\x3\x2\x2"+
		"\x2\x32\x34\x3\x2\x2\x2\x33.\x3\x2\x2\x2\x34\x37\x3\x2\x2\x2\x35\x33\x3"+
		"\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36\x5\x3\x2\x2\x2\x37\x35\x3\x2\x2\x2\x38"+
		":\a\x4\x2\x2\x39\x38\x3\x2\x2\x2\x39:\x3\x2\x2\x2:<\x3\x2\x2\x2;=\a\""+
		"\x2\x2<;\x3\x2\x2\x2=>\x3\x2\x2\x2><\x3\x2\x2\x2>?\x3\x2\x2\x2?\a\x3\x2"+
		"\x2\x2@\x42\a\x4\x2\x2\x41@\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42\x44\x3"+
		"\x2\x2\x2\x43\x45\a\"\x2\x2\x44\x43\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46"+
		"\x44\x3\x2\x2\x2\x46G\x3\x2\x2\x2GH\x3\x2\x2\x2HJ\a\x3\x2\x2IK\a\"\x2"+
		"\x2JI\x3\x2\x2\x2KL\x3\x2\x2\x2LJ\x3\x2\x2\x2LM\x3\x2\x2\x2M\t\x3\x2\x2"+
		"\x2NT\a\x5\x2\x2OS\a\x5\x2\x2PS\n\x2\x2\x2QS\a#\x2\x2RO\x3\x2\x2\x2RP"+
		"\x3\x2\x2\x2RQ\x3\x2\x2\x2SV\x3\x2\x2\x2TU\x3\x2\x2\x2TR\x3\x2\x2\x2U"+
		"W\x3\x2\x2\x2VT\x3\x2\x2\x2WX\a\x5\x2\x2X\v\x3\x2\x2\x2Y]\x5\n\x6\x2Z"+
		"]\x5\x6\x4\x2[]\x5\b\x5\x2\\Y\x3\x2\x2\x2\\Z\x3\x2\x2\x2\\[\x3\x2\x2\x2"+
		"]\r\x3\x2\x2\x2^_\x5\x2\x2\x2_\x61\a\b\x2\x2`\x62\x5\x10\t\x2\x61`\x3"+
		"\x2\x2\x2\x61\x62\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63\x64\a\t\x2\x2\x64"+
		"\xF\x3\x2\x2\x2\x65j\x5\x14\v\x2\x66g\a\n\x2\x2gi\x5\x14\v\x2h\x66\x3"+
		"\x2\x2\x2il\x3\x2\x2\x2jh\x3\x2\x2\x2jk\x3\x2\x2\x2k\x11\x3\x2\x2\x2l"+
		"j\x3\x2\x2\x2mn\t\x3\x2\x2n\x13\x3\x2\x2\x2op\b\v\x1\x2pt\a\x17\x2\x2"+
		"qs\a\x18\x2\x2rq\x3\x2\x2\x2sv\x3\x2\x2\x2tr\x3\x2\x2\x2tu\x3\x2\x2\x2"+
		"uw\x3\x2\x2\x2vt\x3\x2\x2\x2w{\x5\x14\v\x2xz\a\x18\x2\x2yx\x3\x2\x2\x2"+
		"z}\x3\x2\x2\x2{y\x3\x2\x2\x2{|\x3\x2\x2\x2|~\x3\x2\x2\x2}{\x3\x2\x2\x2"+
		"~\x82\a\x19\x2\x2\x7F\x81\a\x18\x2\x2\x80\x7F\x3\x2\x2\x2\x81\x84\x3\x2"+
		"\x2\x2\x82\x80\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x85\x3\x2\x2\x2\x84"+
		"\x82\x3\x2\x2\x2\x85\x89\x5\x14\v\x2\x86\x88\a\x18\x2\x2\x87\x86\x3\x2"+
		"\x2\x2\x88\x8B\x3\x2\x2\x2\x89\x87\x3\x2\x2\x2\x89\x8A\x3\x2\x2\x2\x8A"+
		"\x8C\x3\x2\x2\x2\x8B\x89\x3\x2\x2\x2\x8C\x90\a\x1A\x2\x2\x8D\x8F\a\x18"+
		"\x2\x2\x8E\x8D\x3\x2\x2\x2\x8F\x92\x3\x2\x2\x2\x90\x8E\x3\x2\x2\x2\x90"+
		"\x91\x3\x2\x2\x2\x91\x93\x3\x2\x2\x2\x92\x90\x3\x2\x2\x2\x93\x94\x5\x14"+
		"\v\b\x94\x9C\x3\x2\x2\x2\x95\x96\a\b\x2\x2\x96\x97\x5\x14\v\x2\x97\x98"+
		"\a\t\x2\x2\x98\x9C\x3\x2\x2\x2\x99\x9C\x5\x4\x3\x2\x9A\x9C\x5\f\a\x2\x9B"+
		"o\x3\x2\x2\x2\x9B\x95\x3\x2\x2\x2\x9B\x99\x3\x2\x2\x2\x9B\x9A\x3\x2\x2"+
		"\x2\x9C\xCD\x3\x2\x2\x2\x9D\xA1\f\a\x2\x2\x9E\xA0\a\x18\x2\x2\x9F\x9E"+
		"\x3\x2\x2\x2\xA0\xA3\x3\x2\x2\x2\xA1\x9F\x3\x2\x2\x2\xA1\xA2\x3\x2\x2"+
		"\x2\xA2\xA4\x3\x2\x2\x2\xA3\xA1\x3\x2\x2\x2\xA4\xA8\a\x1B\x2\x2\xA5\xA7"+
		"\a\x18\x2\x2\xA6\xA5\x3\x2\x2\x2\xA7\xAA\x3\x2\x2\x2\xA8\xA6\x3\x2\x2"+
		"\x2\xA8\xA9\x3\x2\x2\x2\xA9\xAB\x3\x2\x2\x2\xAA\xA8\x3\x2\x2\x2\xAB\xAF"+
		"\x5\x14\v\x2\xAC\xAE\a\x18\x2\x2\xAD\xAC\x3\x2\x2\x2\xAE\xB1\x3\x2\x2"+
		"\x2\xAF\xAD\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xB2\x3\x2\x2\x2\xB1\xAF"+
		"\x3\x2\x2\x2\xB2\xB6\a\x1C\x2\x2\xB3\xB5\a\x18\x2\x2\xB4\xB3\x3\x2\x2"+
		"\x2\xB5\xB8\x3\x2\x2\x2\xB6\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xB9"+
		"\x3\x2\x2\x2\xB8\xB6\x3\x2\x2\x2\xB9\xBA\x5\x14\v\b\xBA\xCC\x3\x2\x2\x2"+
		"\xBB\xBF\f\x6\x2\x2\xBC\xBE\a\x18\x2\x2\xBD\xBC\x3\x2\x2\x2\xBE\xC1\x3"+
		"\x2\x2\x2\xBF\xBD\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\xC2\x3\x2\x2\x2"+
		"\xC1\xBF\x3\x2\x2\x2\xC2\xC6\x5\x12\n\x2\xC3\xC5\a\x18\x2\x2\xC4\xC3\x3"+
		"\x2\x2\x2\xC5\xC8\x3\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC6\xC7\x3\x2\x2\x2"+
		"\xC7\xC9\x3\x2\x2\x2\xC8\xC6\x3\x2\x2\x2\xC9\xCA\x5\x14\v\a\xCA\xCC\x3"+
		"\x2\x2\x2\xCB\x9D\x3\x2\x2\x2\xCB\xBB\x3\x2\x2\x2\xCC\xCF\x3\x2\x2\x2"+
		"\xCD\xCB\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\x15\x3\x2\x2\x2\xCF\xCD\x3"+
		"\x2\x2\x2\xD0\xD1\x5\x14\v\x2\xD1\x17\x3\x2\x2\x2\xD2\xD3\t\x4\x2\x2\xD3"+
		"\x19\x3\x2\x2\x2\xD4\xD5\a\x1E\x2\x2\xD5\x1B\x3\x2\x2\x2\xD6\xD7\x5\x4"+
		"\x3\x2\xD7\x1D\x3\x2\x2\x2\xD8\xDC\x5\x2\x2\x2\xD9\xDB\x5\x18\r\x2\xDA"+
		"\xD9\x3\x2\x2\x2\xDB\xDE\x3\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDC\xDD\x3\x2"+
		"\x2\x2\xDD\xDF\x3\x2\x2\x2\xDE\xDC\x3\x2\x2\x2\xDF\xE3\a\x1C\x2\x2\xE0"+
		"\xE2\x5\x18\r\x2\xE1\xE0\x3\x2\x2\x2\xE2\xE5\x3\x2\x2\x2\xE3\xE1\x3\x2"+
		"\x2\x2\xE3\xE4\x3\x2\x2\x2\xE4\x1F\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE6"+
		"\xE7\x5\x1E\x10\x2\xE7\xE8\x5\x14\v\x2\xE8!\x3\x2\x2\x2\xE9\xED\a\x1F"+
		"\x2\x2\xEA\xEC\x5\x18\r\x2\xEB\xEA\x3\x2\x2\x2\xEC\xEF\x3\x2\x2\x2\xED"+
		"\xEB\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xF3\x3\x2\x2\x2\xEF\xED\x3\x2"+
		"\x2\x2\xF0\xF4\x5 \x11\x2\xF1\xF4\x5\x1C\xF\x2\xF2\xF4\x5$\x13\x2\xF3"+
		"\xF0\x3\x2\x2\x2\xF3\xF1\x3\x2\x2\x2\xF3\xF2\x3\x2\x2\x2\xF4\x109\x3\x2"+
		"\x2\x2\xF5\xF7\x5\x18\r\x2\xF6\xF5\x3\x2\x2\x2\xF7\xFA\x3\x2\x2\x2\xF8"+
		"\xF6\x3\x2\x2\x2\xF8\xF9\x3\x2\x2\x2\xF9\xFB\x3\x2\x2\x2\xFA\xF8\x3\x2"+
		"\x2\x2\xFB\xFF\a\n\x2\x2\xFC\xFE\x5\x18\r\x2\xFD\xFC\x3\x2\x2\x2\xFE\x101"+
		"\x3\x2\x2\x2\xFF\xFD\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100\x105\x3\x2"+
		"\x2\x2\x101\xFF\x3\x2\x2\x2\x102\x106\x5 \x11\x2\x103\x106\x5\x1C\xF\x2"+
		"\x104\x106\x5$\x13\x2\x105\x102\x3\x2\x2\x2\x105\x103\x3\x2\x2\x2\x105"+
		"\x104\x3\x2\x2\x2\x106\x108\x3\x2\x2\x2\x107\xF8\x3\x2\x2\x2\x108\x10B"+
		"\x3\x2\x2\x2\x109\x107\x3\x2\x2\x2\x109\x10A\x3\x2\x2\x2\x10A\x10F\x3"+
		"\x2\x2\x2\x10B\x109\x3\x2\x2\x2\x10C\x10E\x5\x18\r\x2\x10D\x10C\x3\x2"+
		"\x2\x2\x10E\x111\x3\x2\x2\x2\x10F\x10D\x3\x2\x2\x2\x10F\x110\x3\x2\x2"+
		"\x2\x110\x112\x3\x2\x2\x2\x111\x10F\x3\x2\x2\x2\x112\x113\a \x2\x2\x113"+
		"#\x3\x2\x2\x2\x114\x116\x5\x1E\x10\x2\x115\x114\x3\x2\x2\x2\x115\x116"+
		"\x3\x2\x2\x2\x116\x117\x3\x2\x2\x2\x117\x11B\x5\x4\x3\x2\x118\x11A\x5"+
		"\x18\r\x2\x119\x118\x3\x2\x2\x2\x11A\x11D\x3\x2\x2\x2\x11B\x119\x3\x2"+
		"\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C\x11E\x3\x2\x2\x2\x11D\x11B\x3\x2\x2"+
		"\x2\x11E\x122\x5\"\x12\x2\x11F\x121\x5\x18\r\x2\x120\x11F\x3\x2\x2\x2"+
		"\x121\x124\x3\x2\x2\x2\x122\x120\x3\x2\x2\x2\x122\x123\x3\x2\x2\x2\x123"+
		"%\x3\x2\x2\x2\x124\x122\x3\x2\x2\x2\x125\x127\x5\x1A\xE\x2\x126\x125\x3"+
		"\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127\x12B\x3\x2\x2\x2\x128\x12A\x5\x18"+
		"\r\x2\x129\x128\x3\x2\x2\x2\x12A\x12D\x3\x2\x2\x2\x12B\x129\x3\x2\x2\x2"+
		"\x12B\x12C\x3\x2\x2\x2\x12C\x12E\x3\x2\x2\x2\x12D\x12B\x3\x2\x2\x2\x12E"+
		"\x132\a\x1F\x2\x2\x12F\x131\x5\x18\r\x2\x130\x12F\x3\x2\x2\x2\x131\x134"+
		"\x3\x2\x2\x2\x132\x130\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133\x137\x3"+
		"\x2\x2\x2\x134\x132\x3\x2\x2\x2\x135\x138\x5 \x11\x2\x136\x138\x5$\x13"+
		"\x2\x137\x135\x3\x2\x2\x2\x137\x136\x3\x2\x2\x2\x138\x14C\x3\x2\x2\x2"+
		"\x139\x13B\x5\x18\r\x2\x13A\x139\x3\x2\x2\x2\x13B\x13E\x3\x2\x2\x2\x13C"+
		"\x13A\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x13F\x3\x2\x2\x2\x13E\x13C"+
		"\x3\x2\x2\x2\x13F\x143\a\n\x2\x2\x140\x142\x5\x18\r\x2\x141\x140\x3\x2"+
		"\x2\x2\x142\x145\x3\x2\x2\x2\x143\x141\x3\x2\x2\x2\x143\x144\x3\x2\x2"+
		"\x2\x144\x148\x3\x2\x2\x2\x145\x143\x3\x2\x2\x2\x146\x149\x5 \x11\x2\x147"+
		"\x149\x5$\x13\x2\x148\x146\x3\x2\x2\x2\x148\x147\x3\x2\x2\x2\x149\x14B"+
		"\x3\x2\x2\x2\x14A\x13C\x3\x2\x2\x2\x14B\x14E\x3\x2\x2\x2\x14C\x14A\x3"+
		"\x2\x2\x2\x14C\x14D\x3\x2\x2\x2\x14D\x152\x3\x2\x2\x2\x14E\x14C\x3\x2"+
		"\x2\x2\x14F\x151\x5\x18\r\x2\x150\x14F\x3\x2\x2\x2\x151\x154\x3\x2\x2"+
		"\x2\x152\x150\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x155\x3\x2\x2\x2"+
		"\x154\x152\x3\x2\x2\x2\x155\x159\a \x2\x2\x156\x158\x5\x18\r\x2\x157\x156"+
		"\x3\x2\x2\x2\x158\x15B\x3\x2\x2\x2\x159\x157\x3\x2\x2\x2\x159\x15A\x3"+
		"\x2\x2\x2\x15A\'\x3\x2\x2\x2\x15B\x159\x3\x2\x2\x2\x33,\x31\x35\x39>\x41"+
		"\x46LRT\\\x61jt{\x82\x89\x90\x9B\xA1\xA8\xAF\xB6\xBF\xC6\xCB\xCD\xDC\xE3"+
		"\xED\xF3\xF8\xFF\x105\x109\x10F\x115\x11B\x122\x126\x12B\x132\x137\x13C"+
		"\x143\x148\x14C\x152\x159";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace EntityQueryLanguage.Grammer
