//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from EntityQueryLanguage/EqlGrammer.g4 by ANTLR 4.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace EntityQueryLanguage.Generated {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5-SNAPSHOT")]
public partial class EqlGrammerParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, ID=30, DIGIT=31, STRING_CHARS=32;
	public const int
		RULE_identity = 0, RULE_callPath = 1, RULE_int = 2, RULE_decimal = 3, 
		RULE_string = 4, RULE_constant = 5, RULE_call = 6, RULE_args = 7, RULE_operator = 8, 
		RULE_expression = 9, RULE_startRule = 10, RULE_ws = 11, RULE_field = 12, 
		RULE_entityQuery = 13, RULE_dataQuery = 14;
	public static readonly string[] ruleNames = {
		"identity", "callPath", "int", "decimal", "string", "constant", "call", 
		"args", "operator", "expression", "startRule", "ws", "field", "entityQuery", 
		"dataQuery"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'-'", "'''", "'\n'", "'\r'", "'('", "')'", "','", "'+'", 
		"'%'", "'^'", "'and'", "'*'", "'or'", "'='", "'<='", "'>='", "'<'", "'>'", 
		"'/'", "'if'", "' '", "'then'", "'else'", "'?'", "':'", "'\t'", "'{'", 
		"'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "ID", "DIGIT", "STRING_CHARS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EqlGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public EqlGrammerParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class IdentityContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(EqlGrammerParser.ID, 0); }
		public IdentityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identity; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentityContext identity() {
		IdentityContext _localctx = new IdentityContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_identity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallPathContext : ParserRuleContext {
		public IdentityContext[] identity() {
			return GetRuleContexts<IdentityContext>();
		}
		public IdentityContext identity(int i) {
			return GetRuleContext<IdentityContext>(i);
		}
		public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public CallPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callPath; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallPathContext callPath() {
		CallPathContext _localctx = new CallPathContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_callPath);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				State = 32; identity();
				}
				break;

			case 2:
				{
				State = 33; call();
				}
				break;
			}
			State = 43;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 36; Match(T__0);
					State = 39;
					switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
					case 1:
						{
						State = 37; identity();
						}
						break;

					case 2:
						{
						State = 38; call();
						}
						break;
					}
					}
					} 
				}
				State = 45;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(EqlGrammerParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(EqlGrammerParser.DIGIT, i);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_int);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 46; Match(T__1);
				}
			}

			State = 50;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 49; Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 52;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalContext : ParserRuleContext {
		public ITerminalNode[] DIGIT() { return GetTokens(EqlGrammerParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(EqlGrammerParser.DIGIT, i);
		}
		public DecimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalContext @decimal() {
		DecimalContext _localctx = new DecimalContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_decimal);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 54; Match(T__1);
				}
			}

			State = 58;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 57; Match(DIGIT);
				}
				}
				State = 60;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==DIGIT );
			State = 62; Match(T__0);
			State = 64;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 63; Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 66;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode[] STRING_CHARS() { return GetTokens(EqlGrammerParser.STRING_CHARS); }
		public ITerminalNode STRING_CHARS(int i) {
			return GetToken(EqlGrammerParser.STRING_CHARS, i);
		}
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_string);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(T__2);
			State = 74;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					State = 72;
					switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
					case 1:
						{
						State = 69; Match(T__2);
						}
						break;

					case 2:
						{
						State = 70;
						_la = _input.La(1);
						if ( _la <= 0 || (_la==T__3 || _la==T__4) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						}
						break;

					case 3:
						{
						State = 71; Match(STRING_CHARS);
						}
						break;
					}
					} 
				}
				State = 76;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			State = 77; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecimalContext @decimal() {
			return GetRuleContext<DecimalContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_constant);
		try {
			State = 82;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 79; @string();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80; @int();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 81; @decimal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public IdentityContext method;
		public ArgsContext arguments;
		public IdentityContext identity() {
			return GetRuleContext<IdentityContext>(0);
		}
		public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; _localctx.method = identity();
			State = 85; Match(T__5);
			State = 87;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__5) | (1L << T__20) | (1L << ID) | (1L << DIGIT))) != 0)) {
				{
				State = 86; _localctx.arguments = args();
				}
			}

			State = 89; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; expression(0);
			State = 96;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__7) {
				{
				{
				State = 92; Match(T__7);
				State = 93; expression(0);
				}
				}
				State = 98;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfThenElseContext : ExpressionContext {
		public ExpressionContext test;
		public ExpressionContext ifTrue;
		public ExpressionContext ifFalse;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfThenElseContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryContext : ExpressionContext {
		public ExpressionContext left;
		public OperatorContext op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public BinaryContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfThenElseInlineContext : ExpressionContext {
		public ExpressionContext test;
		public ExpressionContext ifTrue;
		public ExpressionContext ifFalse;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfThenElseInlineContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElseInline(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprContext : ExpressionContext {
		public ExpressionContext body;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallOrIdContext : ExpressionContext {
		public CallPathContext callPath() {
			return GetRuleContext<CallPathContext>(0);
		}
		public CallOrIdContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallOrId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			switch (_input.La(1)) {
			case T__20:
				{
				_localctx = new IfThenElseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 102; Match(T__20);
				State = 106;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__21) {
					{
					{
					State = 103; Match(T__21);
					}
					}
					State = 108;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 109; ((IfThenElseContext)_localctx).test = expression(0);
				State = 113;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__21) {
					{
					{
					State = 110; Match(T__21);
					}
					}
					State = 115;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 116; Match(T__22);
				State = 120;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__21) {
					{
					{
					State = 117; Match(T__21);
					}
					}
					State = 122;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 123; ((IfThenElseContext)_localctx).ifTrue = expression(0);
				State = 127;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__21) {
					{
					{
					State = 124; Match(T__21);
					}
					}
					State = 129;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 130; Match(T__23);
				State = 134;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__21) {
					{
					{
					State = 131; Match(T__21);
					}
					}
					State = 136;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 137; ((IfThenElseContext)_localctx).ifFalse = expression(6);
				}
				break;
			case T__5:
				{
				_localctx = new ExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 139; Match(T__5);
				State = 140; ((ExprContext)_localctx).body = expression(0);
				State = 141; Match(T__6);
				}
				break;
			case ID:
				{
				_localctx = new CallOrIdContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 143; callPath();
				}
				break;
			case T__1:
			case T__2:
			case DIGIT:
				{
				_localctx = new ConstContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 144; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 195;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 193;
					switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
					case 1:
						{
						_localctx = new IfThenElseInlineContext(new ExpressionContext(_parentctx, _parentState));
						((IfThenElseInlineContext)_localctx).test = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 147;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 151;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 148; Match(T__21);
							}
							}
							State = 153;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 154; Match(T__24);
						State = 158;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 155; Match(T__21);
							}
							}
							State = 160;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 161; ((IfThenElseInlineContext)_localctx).ifTrue = expression(0);
						State = 165;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 162; Match(T__21);
							}
							}
							State = 167;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 168; Match(T__25);
						State = 172;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 169; Match(T__21);
							}
							}
							State = 174;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 175; ((IfThenElseInlineContext)_localctx).ifFalse = expression(6);
						}
						break;

					case 2:
						{
						_localctx = new BinaryContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 177;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 181;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 178; Match(T__21);
							}
							}
							State = 183;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 184; ((BinaryContext)_localctx).op = @operator();
						State = 188;
						_errHandler.Sync(this);
						_la = _input.La(1);
						while (_la==T__21) {
							{
							{
							State = 185; Match(T__21);
							}
							}
							State = 190;
							_errHandler.Sync(this);
							_la = _input.La(1);
						}
						State = 191; ((BinaryContext)_localctx).right = expression(5);
						}
						break;
					}
					} 
				}
				State = 197;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StartRuleContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WsContext : ParserRuleContext {
		public WsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ws; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WsContext ws() {
		WsContext _localctx = new WsContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_ws);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public CallPathContext callPath() {
			return GetRuleContext<CallPathContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; callPath();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityQueryContext : ParserRuleContext {
		public CallPathContext entity;
		public CallPathContext callPath() {
			return GetRuleContext<CallPathContext>(0);
		}
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public EntityQueryContext[] entityQuery() {
			return GetRuleContexts<EntityQueryContext>();
		}
		public EntityQueryContext entityQuery(int i) {
			return GetRuleContext<EntityQueryContext>(i);
		}
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public EntityQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityQueryContext entityQuery() {
		EntityQueryContext _localctx = new EntityQueryContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_entityQuery);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; _localctx.entity = callPath();
			State = 208;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 205; ws();
				}
				}
				State = 210;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 211; Match(T__27);
			State = 215;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 212; ws();
				}
				}
				State = 217;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 220;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 218; field();
				}
				break;

			case 2:
				{
				State = 219; entityQuery();
				}
				break;
			}
			State = 241;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 225;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
						{
						{
						State = 222; ws();
						}
						}
						State = 227;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 228; Match(T__7);
					State = 232;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
						{
						{
						State = 229; ws();
						}
						}
						State = 234;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 237;
					switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
					case 1:
						{
						State = 235; field();
						}
						break;

					case 2:
						{
						State = 236; entityQuery();
						}
						break;
					}
					}
					} 
				}
				State = 243;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
			}
			State = 247;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 244; ws();
				}
				}
				State = 249;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 250; Match(T__28);
			State = 254;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,35,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 251; ws();
					}
					} 
				}
				State = 256;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,35,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataQueryContext : ParserRuleContext {
		public EntityQueryContext[] entityQuery() {
			return GetRuleContexts<EntityQueryContext>();
		}
		public EntityQueryContext entityQuery(int i) {
			return GetRuleContext<EntityQueryContext>(i);
		}
		public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public DataQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IEqlGrammerVisitor<TResult> typedVisitor = visitor as IEqlGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataQueryContext dataQuery() {
		DataQueryContext _localctx = new DataQueryContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_dataQuery);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 257; ws();
				}
				}
				State = 262;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 263; Match(T__27);
			State = 267;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 264; ws();
				}
				}
				State = 269;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 270; entityQuery();
			State = 287;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 274;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
						{
						{
						State = 271; ws();
						}
						}
						State = 276;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 277; Match(T__7);
					State = 281;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
						{
						{
						State = 278; ws();
						}
						}
						State = 283;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 284; entityQuery();
					}
					} 
				}
				State = 289;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			}
			State = 293;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 290; ws();
				}
				}
				State = 295;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 296; Match(T__28);
			State = 300;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__21) | (1L << T__26))) != 0)) {
				{
				{
				State = 297; ws();
				}
				}
				State = 302;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\"\x132\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x3\x2\x3\x2\x3\x3\x3\x3\x5\x3%\n\x3\x3\x3\x3\x3\x3\x3\x5\x3*\n"+
		"\x3\a\x3,\n\x3\f\x3\xE\x3/\v\x3\x3\x4\x5\x4\x32\n\x4\x3\x4\x6\x4\x35\n"+
		"\x4\r\x4\xE\x4\x36\x3\x5\x5\x5:\n\x5\x3\x5\x6\x5=\n\x5\r\x5\xE\x5>\x3"+
		"\x5\x3\x5\x6\x5\x43\n\x5\r\x5\xE\x5\x44\x3\x6\x3\x6\x3\x6\x3\x6\a\x6K"+
		"\n\x6\f\x6\xE\x6N\v\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x5\aU\n\a\x3\b\x3\b"+
		"\x3\b\x5\bZ\n\b\x3\b\x3\b\x3\t\x3\t\x3\t\a\t\x61\n\t\f\t\xE\t\x64\v\t"+
		"\x3\n\x3\n\x3\v\x3\v\x3\v\a\vk\n\v\f\v\xE\vn\v\v\x3\v\x3\v\a\vr\n\v\f"+
		"\v\xE\vu\v\v\x3\v\x3\v\a\vy\n\v\f\v\xE\v|\v\v\x3\v\x3\v\a\v\x80\n\v\f"+
		"\v\xE\v\x83\v\v\x3\v\x3\v\a\v\x87\n\v\f\v\xE\v\x8A\v\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x94\n\v\x3\v\x3\v\a\v\x98\n\v\f\v\xE\v"+
		"\x9B\v\v\x3\v\x3\v\a\v\x9F\n\v\f\v\xE\v\xA2\v\v\x3\v\x3\v\a\v\xA6\n\v"+
		"\f\v\xE\v\xA9\v\v\x3\v\x3\v\a\v\xAD\n\v\f\v\xE\v\xB0\v\v\x3\v\x3\v\x3"+
		"\v\x3\v\a\v\xB6\n\v\f\v\xE\v\xB9\v\v\x3\v\x3\v\a\v\xBD\n\v\f\v\xE\v\xC0"+
		"\v\v\x3\v\x3\v\a\v\xC4\n\v\f\v\xE\v\xC7\v\v\x3\f\x3\f\x3\r\x3\r\x3\xE"+
		"\x3\xE\x3\xF\x3\xF\a\xF\xD1\n\xF\f\xF\xE\xF\xD4\v\xF\x3\xF\x3\xF\a\xF"+
		"\xD8\n\xF\f\xF\xE\xF\xDB\v\xF\x3\xF\x3\xF\x5\xF\xDF\n\xF\x3\xF\a\xF\xE2"+
		"\n\xF\f\xF\xE\xF\xE5\v\xF\x3\xF\x3\xF\a\xF\xE9\n\xF\f\xF\xE\xF\xEC\v\xF"+
		"\x3\xF\x3\xF\x5\xF\xF0\n\xF\a\xF\xF2\n\xF\f\xF\xE\xF\xF5\v\xF\x3\xF\a"+
		"\xF\xF8\n\xF\f\xF\xE\xF\xFB\v\xF\x3\xF\x3\xF\a\xF\xFF\n\xF\f\xF\xE\xF"+
		"\x102\v\xF\x3\x10\a\x10\x105\n\x10\f\x10\xE\x10\x108\v\x10\x3\x10\x3\x10"+
		"\a\x10\x10C\n\x10\f\x10\xE\x10\x10F\v\x10\x3\x10\x3\x10\a\x10\x113\n\x10"+
		"\f\x10\xE\x10\x116\v\x10\x3\x10\x3\x10\a\x10\x11A\n\x10\f\x10\xE\x10\x11D"+
		"\v\x10\x3\x10\a\x10\x120\n\x10\f\x10\xE\x10\x123\v\x10\x3\x10\a\x10\x126"+
		"\n\x10\f\x10\xE\x10\x129\v\x10\x3\x10\x3\x10\a\x10\x12D\n\x10\f\x10\xE"+
		"\x10\x130\v\x10\x3\x10\x3L\x2\x3\x14\x11\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f"+
		"\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2\x2\x5"+
		"\x3\x2\x6\a\x4\x2\x4\x4\v\x16\x5\x2\x6\a\x18\x18\x1D\x1D\x151\x2 \x3\x2"+
		"\x2\x2\x4$\x3\x2\x2\x2\x6\x31\x3\x2\x2\x2\b\x39\x3\x2\x2\x2\n\x46\x3\x2"+
		"\x2\x2\fT\x3\x2\x2\x2\xEV\x3\x2\x2\x2\x10]\x3\x2\x2\x2\x12\x65\x3\x2\x2"+
		"\x2\x14\x93\x3\x2\x2\x2\x16\xC8\x3\x2\x2\x2\x18\xCA\x3\x2\x2\x2\x1A\xCC"+
		"\x3\x2\x2\x2\x1C\xCE\x3\x2\x2\x2\x1E\x106\x3\x2\x2\x2 !\a \x2\x2!\x3\x3"+
		"\x2\x2\x2\"%\x5\x2\x2\x2#%\x5\xE\b\x2$\"\x3\x2\x2\x2$#\x3\x2\x2\x2%-\x3"+
		"\x2\x2\x2&)\a\x3\x2\x2\'*\x5\x2\x2\x2(*\x5\xE\b\x2)\'\x3\x2\x2\x2)(\x3"+
		"\x2\x2\x2*,\x3\x2\x2\x2+&\x3\x2\x2\x2,/\x3\x2\x2\x2-+\x3\x2\x2\x2-.\x3"+
		"\x2\x2\x2.\x5\x3\x2\x2\x2/-\x3\x2\x2\x2\x30\x32\a\x4\x2\x2\x31\x30\x3"+
		"\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x34\x3\x2\x2\x2\x33\x35\a!\x2\x2\x34"+
		"\x33\x3\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36\x34\x3\x2\x2\x2\x36\x37\x3\x2"+
		"\x2\x2\x37\a\x3\x2\x2\x2\x38:\a\x4\x2\x2\x39\x38\x3\x2\x2\x2\x39:\x3\x2"+
		"\x2\x2:<\x3\x2\x2\x2;=\a!\x2\x2<;\x3\x2\x2\x2=>\x3\x2\x2\x2><\x3\x2\x2"+
		"\x2>?\x3\x2\x2\x2?@\x3\x2\x2\x2@\x42\a\x3\x2\x2\x41\x43\a!\x2\x2\x42\x41"+
		"\x3\x2\x2\x2\x43\x44\x3\x2\x2\x2\x44\x42\x3\x2\x2\x2\x44\x45\x3\x2\x2"+
		"\x2\x45\t\x3\x2\x2\x2\x46L\a\x5\x2\x2GK\a\x5\x2\x2HK\n\x2\x2\x2IK\a\""+
		"\x2\x2JG\x3\x2\x2\x2JH\x3\x2\x2\x2JI\x3\x2\x2\x2KN\x3\x2\x2\x2LM\x3\x2"+
		"\x2\x2LJ\x3\x2\x2\x2MO\x3\x2\x2\x2NL\x3\x2\x2\x2OP\a\x5\x2\x2P\v\x3\x2"+
		"\x2\x2QU\x5\n\x6\x2RU\x5\x6\x4\x2SU\x5\b\x5\x2TQ\x3\x2\x2\x2TR\x3\x2\x2"+
		"\x2TS\x3\x2\x2\x2U\r\x3\x2\x2\x2VW\x5\x2\x2\x2WY\a\b\x2\x2XZ\x5\x10\t"+
		"\x2YX\x3\x2\x2\x2YZ\x3\x2\x2\x2Z[\x3\x2\x2\x2[\\\a\t\x2\x2\\\xF\x3\x2"+
		"\x2\x2]\x62\x5\x14\v\x2^_\a\n\x2\x2_\x61\x5\x14\v\x2`^\x3\x2\x2\x2\x61"+
		"\x64\x3\x2\x2\x2\x62`\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63\x11\x3\x2\x2"+
		"\x2\x64\x62\x3\x2\x2\x2\x65\x66\t\x3\x2\x2\x66\x13\x3\x2\x2\x2gh\b\v\x1"+
		"\x2hl\a\x17\x2\x2ik\a\x18\x2\x2ji\x3\x2\x2\x2kn\x3\x2\x2\x2lj\x3\x2\x2"+
		"\x2lm\x3\x2\x2\x2mo\x3\x2\x2\x2nl\x3\x2\x2\x2os\x5\x14\v\x2pr\a\x18\x2"+
		"\x2qp\x3\x2\x2\x2ru\x3\x2\x2\x2sq\x3\x2\x2\x2st\x3\x2\x2\x2tv\x3\x2\x2"+
		"\x2us\x3\x2\x2\x2vz\a\x19\x2\x2wy\a\x18\x2\x2xw\x3\x2\x2\x2y|\x3\x2\x2"+
		"\x2zx\x3\x2\x2\x2z{\x3\x2\x2\x2{}\x3\x2\x2\x2|z\x3\x2\x2\x2}\x81\x5\x14"+
		"\v\x2~\x80\a\x18\x2\x2\x7F~\x3\x2\x2\x2\x80\x83\x3\x2\x2\x2\x81\x7F\x3"+
		"\x2\x2\x2\x81\x82\x3\x2\x2\x2\x82\x84\x3\x2\x2\x2\x83\x81\x3\x2\x2\x2"+
		"\x84\x88\a\x1A\x2\x2\x85\x87\a\x18\x2\x2\x86\x85\x3\x2\x2\x2\x87\x8A\x3"+
		"\x2\x2\x2\x88\x86\x3\x2\x2\x2\x88\x89\x3\x2\x2\x2\x89\x8B\x3\x2\x2\x2"+
		"\x8A\x88\x3\x2\x2\x2\x8B\x8C\x5\x14\v\b\x8C\x94\x3\x2\x2\x2\x8D\x8E\a"+
		"\b\x2\x2\x8E\x8F\x5\x14\v\x2\x8F\x90\a\t\x2\x2\x90\x94\x3\x2\x2\x2\x91"+
		"\x94\x5\x4\x3\x2\x92\x94\x5\f\a\x2\x93g\x3\x2\x2\x2\x93\x8D\x3\x2\x2\x2"+
		"\x93\x91\x3\x2\x2\x2\x93\x92\x3\x2\x2\x2\x94\xC5\x3\x2\x2\x2\x95\x99\f"+
		"\a\x2\x2\x96\x98\a\x18\x2\x2\x97\x96\x3\x2\x2\x2\x98\x9B\x3\x2\x2\x2\x99"+
		"\x97\x3\x2\x2\x2\x99\x9A\x3\x2\x2\x2\x9A\x9C\x3\x2\x2\x2\x9B\x99\x3\x2"+
		"\x2\x2\x9C\xA0\a\x1B\x2\x2\x9D\x9F\a\x18\x2\x2\x9E\x9D\x3\x2\x2\x2\x9F"+
		"\xA2\x3\x2\x2\x2\xA0\x9E\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\xA3\x3\x2"+
		"\x2\x2\xA2\xA0\x3\x2\x2\x2\xA3\xA7\x5\x14\v\x2\xA4\xA6\a\x18\x2\x2\xA5"+
		"\xA4\x3\x2\x2\x2\xA6\xA9\x3\x2\x2\x2\xA7\xA5\x3\x2\x2\x2\xA7\xA8\x3\x2"+
		"\x2\x2\xA8\xAA\x3\x2\x2\x2\xA9\xA7\x3\x2\x2\x2\xAA\xAE\a\x1C\x2\x2\xAB"+
		"\xAD\a\x18\x2\x2\xAC\xAB\x3\x2\x2\x2\xAD\xB0\x3\x2\x2\x2\xAE\xAC\x3\x2"+
		"\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF\xB1\x3\x2\x2\x2\xB0\xAE\x3\x2\x2\x2\xB1"+
		"\xB2\x5\x14\v\b\xB2\xC4\x3\x2\x2\x2\xB3\xB7\f\x6\x2\x2\xB4\xB6\a\x18\x2"+
		"\x2\xB5\xB4\x3\x2\x2\x2\xB6\xB9\x3\x2\x2\x2\xB7\xB5\x3\x2\x2\x2\xB7\xB8"+
		"\x3\x2\x2\x2\xB8\xBA\x3\x2\x2\x2\xB9\xB7\x3\x2\x2\x2\xBA\xBE\x5\x12\n"+
		"\x2\xBB\xBD\a\x18\x2\x2\xBC\xBB\x3\x2\x2\x2\xBD\xC0\x3\x2\x2\x2\xBE\xBC"+
		"\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xC1\x3\x2\x2\x2\xC0\xBE\x3\x2\x2"+
		"\x2\xC1\xC2\x5\x14\v\a\xC2\xC4\x3\x2\x2\x2\xC3\x95\x3\x2\x2\x2\xC3\xB3"+
		"\x3\x2\x2\x2\xC4\xC7\x3\x2\x2\x2\xC5\xC3\x3\x2\x2\x2\xC5\xC6\x3\x2\x2"+
		"\x2\xC6\x15\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC8\xC9\x5\x14\v\x2\xC9\x17"+
		"\x3\x2\x2\x2\xCA\xCB\t\x4\x2\x2\xCB\x19\x3\x2\x2\x2\xCC\xCD\x5\x4\x3\x2"+
		"\xCD\x1B\x3\x2\x2\x2\xCE\xD2\x5\x4\x3\x2\xCF\xD1\x5\x18\r\x2\xD0\xCF\x3"+
		"\x2\x2\x2\xD1\xD4\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2"+
		"\xD3\xD5\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD5\xD9\a\x1E\x2\x2\xD6\xD8\x5"+
		"\x18\r\x2\xD7\xD6\x3\x2\x2\x2\xD8\xDB\x3\x2\x2\x2\xD9\xD7\x3\x2\x2\x2"+
		"\xD9\xDA\x3\x2\x2\x2\xDA\xDE\x3\x2\x2\x2\xDB\xD9\x3\x2\x2\x2\xDC\xDF\x5"+
		"\x1A\xE\x2\xDD\xDF\x5\x1C\xF\x2\xDE\xDC\x3\x2\x2\x2\xDE\xDD\x3\x2\x2\x2"+
		"\xDF\xF3\x3\x2\x2\x2\xE0\xE2\x5\x18\r\x2\xE1\xE0\x3\x2\x2\x2\xE2\xE5\x3"+
		"\x2\x2\x2\xE3\xE1\x3\x2\x2\x2\xE3\xE4\x3\x2\x2\x2\xE4\xE6\x3\x2\x2\x2"+
		"\xE5\xE3\x3\x2\x2\x2\xE6\xEA\a\n\x2\x2\xE7\xE9\x5\x18\r\x2\xE8\xE7\x3"+
		"\x2\x2\x2\xE9\xEC\x3\x2\x2\x2\xEA\xE8\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2"+
		"\xEB\xEF\x3\x2\x2\x2\xEC\xEA\x3\x2\x2\x2\xED\xF0\x5\x1A\xE\x2\xEE\xF0"+
		"\x5\x1C\xF\x2\xEF\xED\x3\x2\x2\x2\xEF\xEE\x3\x2\x2\x2\xF0\xF2\x3\x2\x2"+
		"\x2\xF1\xE3\x3\x2\x2\x2\xF2\xF5\x3\x2\x2\x2\xF3\xF1\x3\x2\x2\x2\xF3\xF4"+
		"\x3\x2\x2\x2\xF4\xF9\x3\x2\x2\x2\xF5\xF3\x3\x2\x2\x2\xF6\xF8\x5\x18\r"+
		"\x2\xF7\xF6\x3\x2\x2\x2\xF8\xFB\x3\x2\x2\x2\xF9\xF7\x3\x2\x2\x2\xF9\xFA"+
		"\x3\x2\x2\x2\xFA\xFC\x3\x2\x2\x2\xFB\xF9\x3\x2\x2\x2\xFC\x100\a\x1F\x2"+
		"\x2\xFD\xFF\x5\x18\r\x2\xFE\xFD\x3\x2\x2\x2\xFF\x102\x3\x2\x2\x2\x100"+
		"\xFE\x3\x2\x2\x2\x100\x101\x3\x2\x2\x2\x101\x1D\x3\x2\x2\x2\x102\x100"+
		"\x3\x2\x2\x2\x103\x105\x5\x18\r\x2\x104\x103\x3\x2\x2\x2\x105\x108\x3"+
		"\x2\x2\x2\x106\x104\x3\x2\x2\x2\x106\x107\x3\x2\x2\x2\x107\x109\x3\x2"+
		"\x2\x2\x108\x106\x3\x2\x2\x2\x109\x10D\a\x1E\x2\x2\x10A\x10C\x5\x18\r"+
		"\x2\x10B\x10A\x3\x2\x2\x2\x10C\x10F\x3\x2\x2\x2\x10D\x10B\x3\x2\x2\x2"+
		"\x10D\x10E\x3\x2\x2\x2\x10E\x110\x3\x2\x2\x2\x10F\x10D\x3\x2\x2\x2\x110"+
		"\x121\x5\x1C\xF\x2\x111\x113\x5\x18\r\x2\x112\x111\x3\x2\x2\x2\x113\x116"+
		"\x3\x2\x2\x2\x114\x112\x3\x2\x2\x2\x114\x115\x3\x2\x2\x2\x115\x117\x3"+
		"\x2\x2\x2\x116\x114\x3\x2\x2\x2\x117\x11B\a\n\x2\x2\x118\x11A\x5\x18\r"+
		"\x2\x119\x118\x3\x2\x2\x2\x11A\x11D\x3\x2\x2\x2\x11B\x119\x3\x2\x2\x2"+
		"\x11B\x11C\x3\x2\x2\x2\x11C\x11E\x3\x2\x2\x2\x11D\x11B\x3\x2\x2\x2\x11E"+
		"\x120\x5\x1C\xF\x2\x11F\x114\x3\x2\x2\x2\x120\x123\x3\x2\x2\x2\x121\x11F"+
		"\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2\x122\x127\x3\x2\x2\x2\x123\x121\x3"+
		"\x2\x2\x2\x124\x126\x5\x18\r\x2\x125\x124\x3\x2\x2\x2\x126\x129\x3\x2"+
		"\x2\x2\x127\x125\x3\x2\x2\x2\x127\x128\x3\x2\x2\x2\x128\x12A\x3\x2\x2"+
		"\x2\x129\x127\x3\x2\x2\x2\x12A\x12E\a\x1F\x2\x2\x12B\x12D\x5\x18\r\x2"+
		"\x12C\x12B\x3\x2\x2\x2\x12D\x130\x3\x2\x2\x2\x12E\x12C\x3\x2\x2\x2\x12E"+
		"\x12F\x3\x2\x2\x2\x12F\x1F\x3\x2\x2\x2\x130\x12E\x3\x2\x2\x2-$)-\x31\x36"+
		"\x39>\x44JLTY\x62lsz\x81\x88\x93\x99\xA0\xA7\xAE\xB7\xBE\xC3\xC5\xD2\xD9"+
		"\xDE\xE3\xEA\xEF\xF3\xF9\x100\x106\x10D\x114\x11B\x121\x127\x12E";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace EntityQueryLanguage.Generated
